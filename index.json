[{"authors":["admin"],"categories":null,"content":"I\u0026rsquo;m Francisco, a fourth year Engineering Physics student at UBC who\u0026rsquo;s passionate about tackling real world problems with the exciting potential of Machine Learning. While you\u0026rsquo;re here, check out some of my projects, view my resume, or drop me a line below.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://Fquico1999.github.io/author/francisco-farinha/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/francisco-farinha/","section":"authors","summary":"I\u0026rsquo;m Francisco, a fourth year Engineering Physics student at UBC who\u0026rsquo;s passionate about tackling real world problems with the exciting potential of Machine Learning. While you\u0026rsquo;re here, check out some of my projects, view my resume, or drop me a line below.","tags":null,"title":"Francisco Farinha","type":"authors"},{"authors":[],"categories":[],"content":"You can find this repository here\nOverview The base concept of a GAN in this scenario is that we have two seperate neural networks which are trained differently.\nThere is a Discriminator and a Generator network with different inputs and outputs.\nThe discriminator classifies images as real or not real (In other words, as coming from the generated distribution or the real data distribution). In this case, the input is an image, and the output is a probability of the input belonging to the real dataset distribution.\nThe generator takes in random seeds and will output an image.\nTraining the Generator Both networks need to be implemented at the same time, but the weights must be updated at different times. To train the generator, we freeze the discriminator weights. We input just random seeds to the generator and the output images are fed into the discriminator. Which will try and evaluate whether they are generated or not. So the labels for this step are all $y_i=1.0$. Backpropagation trains the generator to produce images that better \u0026ldquo;fool\u0026rdquo; the discriminator\nTraining the Discriminator We freeze the weights of the Generator, we generate images with the generator, and we take the same number of images from the input data distribution. These are fed into the discriminator which outputs probabilities of being from the input dataset. Thus backpropagation will train the discriminator to be able to distinguish real from generated images.\nimport tensorflow as tf tf.enable_eager_execution() from tensorflow.keras.losses import BinaryCrossentropy from tensorflow.keras.optimizers import Adam from tensorflow.keras.models import Sequential, Model, load_model from tensorflow.keras.layers import Conv2D, LeakyReLU, Dropout, ZeroPadding2D, ReLU from tensorflow.keras.layers import BatchNormalization, Flatten, Dense, UpSampling2D from tensorflow.keras.layers import Reshape, Activation, Conv2DTranspose from tensorflow.keras.layers import AveragePooling2D, Input, Add from tensorflow.keras.backend import resize_images gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.3) sess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options)) # config = tf.ConfigProto() # config.gpu_options.allow_growth = True # session = tf.Session(config=config) import numpy as np import csv import time import os import matplotlib.pyplot as plt from PIL import Image from tqdm import tqdm import dask.array as da  Defining the Models We have two models to define, the generator and the discriminator.\nIntuitively, if the output we want to generate are images, then the discriminator will be a ConvNet, since it needs to extract features from an image to output a single numerical prediction. So it\u0026rsquo;s no surprise our model takes the image and applies a series of convolutions. To prevent overfitting, we also apply Dropout to our layers.\nOn the other hand, the generator takes in a vector seed and generates an image. So intuitively it must be composed of a series of upsamplings, which it is.\ndef get_discriminator(image_shape): model = Sequential() model.add(Conv2D(32, kernel_size=3, strides=2, input_shape=image_shape, padding=\u0026quot;same\u0026quot;)) model.add(LeakyReLU(alpha=0.2)) model.add(Dropout(0.25)) model.add(Conv2D(64, kernel_size=3, strides=2, padding=\u0026quot;same\u0026quot;)) model.add(ZeroPadding2D(padding=((0,1),(0,1)))) model.add(BatchNormalization(momentum=0.8)) model.add(LeakyReLU(alpha=0.2)) model.add(Dropout(0.25)) model.add(Conv2D(128, kernel_size=3, strides=2, padding=\u0026quot;same\u0026quot;)) model.add(BatchNormalization(momentum=0.8)) model.add(LeakyReLU(alpha=0.2)) model.add(Dropout(0.25)) model.add(Conv2D(256, kernel_size=3, strides=1, padding=\u0026quot;same\u0026quot;)) model.add(BatchNormalization(momentum=0.8)) model.add(LeakyReLU(alpha=0.2)) model.add(Dropout(0.25)) model.add(Conv2D(512, kernel_size=3, strides=1, padding=\u0026quot;same\u0026quot;)) model.add(BatchNormalization(momentum=0.8)) model.add(LeakyReLU(alpha=0.2)) model.add(Dropout(0.25)) model.add(Flatten()) model.add(Dense(1, activation='sigmoid')) return model def get_generator(seed_size): model = Sequential() model.add(Dense(4*4*256,activation=\u0026quot;relu\u0026quot;,input_dim=seed_size)) model.add(Reshape((4,4,256))) model.add(UpSampling2D()) model.add(Conv2D(256,kernel_size=3,padding=\u0026quot;same\u0026quot;)) model.add(BatchNormalization(momentum=0.8)) model.add(LeakyReLU(alpha=0.2)) model.add(UpSampling2D()) model.add(Conv2D(256,kernel_size=3,padding=\u0026quot;same\u0026quot;)) model.add(BatchNormalization(momentum=0.8)) model.add(LeakyReLU(alpha=0.2)) # Output resolution, additional upsampling model.add(UpSampling2D()) model.add(Conv2D(128,kernel_size=3,padding=\u0026quot;same\u0026quot;)) model.add(BatchNormalization(momentum=0.8)) model.add(LeakyReLU(alpha=0.2)) model.add(UpSampling2D(size=(2,2))) model.add(Conv2D(128,kernel_size=3,padding=\u0026quot;same\u0026quot;)) model.add(BatchNormalization(momentum=0.8)) model.add(LeakyReLU(alpha=0.2)) # Final CNN layer model.add(Conv2D(3,kernel_size=3,padding=\u0026quot;same\u0026quot;)) model.add(Activation(\u0026quot;tanh\u0026quot;)) return model  Helper Functions Here I\u0026rsquo;ll define functions that help with training the GAN.\nFirst, we need to define the loss function for both the discriminator and the generator since these are trained differently.\nI\u0026rsquo;ll also define a helper function to save progress images of the training\ndef loss_generator(Y_hat): \u0026quot;\u0026quot;\u0026quot; Implements Binary Crossentropy Loss for the Generator Arguments: Y_hat -- Discriminator Predictions Returns: loss -- BinaryCrossentropy loss for the generator \u0026quot;\u0026quot;\u0026quot; #Recall the generator is trained on y_hats of only one Y = tf.ones_like(Y_hat) loss = BinaryCrossentropy(from_logits=True)(Y, Y_hat) return loss def loss_discriminator(Y_hat_real, Y_hat_gen): \u0026quot;\u0026quot;\u0026quot; Implements BinaryCrossentropy loss for the Discriminator Arguments: Y_hat_real -- Predictions on real distribution samples Y_hat_gen -- Predictions on generated samples Returns: total -- Combined Real and Generated loss of Discriminator \u0026quot;\u0026quot;\u0026quot; entropy = BinaryCrossentropy(from_logits=True) Y_real = tf.ones_like(Y_hat_real) Y_gen = tf.zeros_like(Y_hat_gen) loss_real = entropy(Y_real, Y_hat_real) loss_gen = entropy(Y_gen, Y_hat_gen) total = loss_real+loss_gen return total def save_images(output_path, epoch, seed): image_array = np.full((16 + (4 * (W+16)), 16 + (7 * (H+16)), 3), 255, dtype=np.uint8) generated_images = generator.predict(seed) generated_images = 0.5 * generated_images + 0.5 image_count = 0 for row in range(4): for col in range(7): r = row * (W+16) + 16 c = col * (H+16) + 16 image_array[r:r+W,c:c+H] = generated_images[image_count] * 255 image_count += 1 if not os.path.exists(output_path): os.makedirs(output_path) filename = os.path.join(output_path,\u0026quot;train-%s.png\u0026quot;%epoch) im = Image.fromarray(image_array) im.save(filename)  Defining a Training step Tensorflow allows for precise control over what a training step is comprised of. tf.function takes a python function and converts it to a graph representation that Tensorflow can use to perform automatic differentiation efficiently. Additionally, it provides us the power to control how the discriminator and generator get updated.\nIt is interesting how this process is accomplished. tf.GradientTape() allows Tensorflow to keep track of the operations defined in the function and then apply automatic differentiation.\nI\u0026rsquo;ll list through the operations that a training step requires:\n Generate a random seed to input to the Generator Obtain a generated dataset from the generator given the input seed Obtain predictions from the discriminator on the dataset obtained from the real distribution Obtian predictions from the discriminator on the generated dataset Obtain losses for both generator and discriminator Using Automatic Differentiation, obtain the gradients for the generator and discriminator  Apply Backpropagation using the gradients.  @tf.function def step(batch): X_real, Y_real = batch seed = tf.random.normal([X_real.shape[0], Y_real.shape[1]]) #GradientTape - how tf does automatic differentiation. with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape: X_gen = generator(seed, training=True) Y_hat_real = discriminator(X_real, training=True) Y_hat_gen = discriminator(X_gen, training=True) gen_loss = loss_generator(Y_hat_gen) disc_loss = loss_discriminator(Y_hat_real, Y_hat_gen) generator_grads = gen_tape.gradient(gen_loss, generator.trainable_variables) discriminator_grads = disc_tape.gradient(disc_loss, discriminator.trainable_variables) generator_optimizer.apply_gradients(zip(generator_grads, generator.trainable_variables)) discriminator_optimizer.apply_gradients(zip(discriminator_grads, discriminator.trainable_variables)) return gen_loss, disc_loss  def train(dataset, epochs, seed_size): fixed_seed = np.random.normal(0, 1, (4 * 7, seed_size)) start = time.time() for epoch in range(epochs): epoch_start = time.time() gen_loss_list = [] disc_loss_list = [] for image_batch in dataset: t = step(image_batch) gen_loss_list.append(t[0]) disc_loss_list.append(t[1]) g_loss = sum(gen_loss_list) / len(gen_loss_list) d_loss = sum(disc_loss_list) / len(disc_loss_list) epoch_elapsed = time.time()-epoch_start print ('Epoch %i, gen loss=%f,disc loss=%f \\t %f' % (epoch+1, g_loss, d_loss, epoch_elapsed)) save_images(output_path,epoch,fixed_seed ) elapsed = time.time()-start print ('Training time: %f' % elapsed)  Preparing the Dataset I\u0026rsquo;ll be training the GAN on Google\u0026rsquo;s Cartoon Set. The premise is to be able to generate good-enough looking faces with set categories to be able to play a randomized game of Guess Who.\nThe dataset is comprised of 10,000 randomly generated cartoon faces, each with .csv files containing the descriptive features.\nThe size of these images are $500\\times500$. This is too large for my current GPU setup, so I\u0026rsquo;ll shrink it down to $64\\times64$. Additionally, the .csv files hold set characteristics about the cartoon such as type of hair, eye color, etc. This allows us to create seeds to represent each of the cartoons.\ndataset_path = './cartoonset10k/'  #Visualize one entry files = os.listdir(dataset_path) i = np.random.randint(len(files)//2) #Investigate one sample file_name = files[i].split('.')[0] #Images are .png image_path = os.path.join(dataset_path, file_name+'.png') csv_path = os.path.join(dataset_path, file_name+'.csv') Image.open(image_path)  #View csv file characteristics = [] variants = [] total_variants = [] with open(csv_path) as f: reader = csv.reader(f) for row in reader: characteristic, value, num = row characteristics.append(characteristic) variants.append(float(value)) total_variants.append(float(num)) unique_seed = np.asarray(variants)/(np.asarray(total_variants)/2)-1.0 print(\u0026quot;Charateristics are:\\n %s\u0026quot; % str(characteristics)) print(\u0026quot;Unique Seed:\\n %s\u0026quot; % str(unique_seed))  Charateristics are: ['eye_angle', 'eye_lashes', 'eye_lid', 'chin_length', 'eyebrow_weight', 'eyebrow_shape', 'eyebrow_thickness', 'face_shape', 'facial_hair', 'hair', 'eye_color', 'face_color', 'hair_color', 'glasses', 'glasses_color', 'eye_slant', 'eyebrow_width', 'eye_eyebrow_distance'] Unique Seed: [-0.33333333 0. 0. -0.33333333 0. -0.57142857 -0.5 0.42857143 0.86666667 -0.63963964 0.6 0.09090909 0.2 0.5 -1. -0.33333333 0.33333333 -1. ]  Given the set number of characteristics, we can define unique seeds for each of the faces in our dataset. In doing so we can hope to create a structured latent space that allows us to tweak and generate images based on characteristics that we wish.\nOne aspect of note. Since the input images are PNG files they have 4 channels, RGBA, where the last one is the transparancy layer. This is useless to us, however it is not sufficient to just remove it as I found it produced artifacts near the borders of the face itself. Instead, we composite the image with a background, and can then safely remove the transparancy layer\ndef get_unique_seed(csv_path): \u0026quot;\u0026quot;\u0026quot; Function to determine seed for a given sample in the dataset Attributes: csv_path -- python string, path to the csv file Returns: unique_seed -- numpy array, unique seed of image, length equal to number of features in the dataset \u0026quot;\u0026quot;\u0026quot; variants = [] total_variants = [] with open(csv_path) as f: reader = csv.reader(f) for row in reader: _ , value, num = row variants.append(float(value)) total_variants.append(float(num)) unique_seed = np.asarray(variants)/(np.asarray(total_variants)/2)-1.0 return unique_seed def get_features(csv_path): \u0026quot;\u0026quot;\u0026quot; Obtains list of feature for the dataset Attributes: csv_path -- python string, path to the csv file Returns: features -- python list, features of a sample in the dataset. Fixed for the datset \u0026quot;\u0026quot;\u0026quot; features = [] with open(csv_path) as f: reader = csv.reader(f) for row in reader: feat ,_,_ = row features.append(feat) return features  #Set width and height W = 64 H = 64 X = [] Y = [] X_path = './X.npy' Y_path = './Y.npy' for i,file_name in tqdm(enumerate(os.listdir(dataset_path)), desc='Reading Data'): #Ensure only look at the images, to avoid duplicates if '.png' in file_name: name = file_name.split('.')[0] #Images are .png image_path = os.path.join(dataset_path, name+'.png') csv_path = os.path.join(dataset_path, name+'.csv') #Get feautures if i == 0: features = get_features(csv_path) #Get unique seed seed = get_unique_seed(csv_path) #Read and resize image png = Image.open(image_path).resize((W,H),Image.ANTIALIAS) background = Image.new('RGBA', png.size, (0,0,0)) #Create alpha composite to avoid artifacts alpha_composite = Image.alpha_composite(background, png) img = np.asarray(alpha_composite)/127.5 - 1.0 #Remove transparancy layer X.append(img[...,:3]) Y.append(seed) #Convert to np X = np.asarray(X) Y = np.asarray(Y) X = np.reshape(X,(-1,W, H, 3)) X = X.astype(np.float32) #Save np.save(X_path,X) np.save(Y_path, Y) print('Done')  #Visualize one entry of the dataset i = np.random.randint(X.shape[0]) fig, ax = plt.subplots() fig.set_size_inches(12,12) fig.set_facecolor('w') ax.imshow(X[i]) ax.set_title(Y[i]) plt.axis('off') plt.show()  GAN Stability and Failure Modes Before we start training, it is noteworthy to mention just how difficult GANs are to train. This difficulty arises because we need to train both a generative and discriminative model at the same time where improvements in one model will impact the other.\nBecause of this dynamic system, GANs can outright fail to converge. As such, I found it necessary to learn more about GAN stability and failure modes.\nFirst, I\u0026rsquo;ll analyze what a Stable GAN should look like while training. Some best practices are:\n Use Leaky ReLU activations instead of ReLU, since it is often preferred to normalize inputs to be between $[-1,1]$, and ReLU will set any inputs less than $0$ to be $0$. Use a Kernel Size that is a factor of the stride Use hyperbolic tan (tanh) as the output layer activation  Once training begins, a stable GAN will have a generator loss somewhere around $[1.0,2.0]$ or higher, whereas the discriminator should hover around $0.5-0.8$.\nAccuracy of the discriminator on both generated and real images should be around $0.7,0.8$\nPersonally, while training, I found that the initial training steps are crucial for stable training. I attempted several values of the learning rate parameter $\\alpha$ which kept halting training without converging. The issue with this is that I required a very small $\\alpha$ ($5.0\\cdot 10^{-6}$) to be able to overcome the initial \u0026ldquo;turbulence\u0026rdquo;, however after becoming stable the improvements made were very slow as a result.\nTraining the Model X_path = './X.npy' Y_path = './Y.npy' #Load the data X = np.load(X_path) Y = np.load(Y_path) #Shuffle data idx = np.random.permutation(range(X.shape[0])) X = X[idx] Y = Y[idx] #Dataset parameters batch_size = 8 #Convert to unshuffled tensorflow dataset object dataset = tf.data.Dataset.from_tensor_slices((X,Y)).batch(batch_size)  Both the Generator and Discriminator will be optimized with Adam. Adam has three parameters that define it. It can be thought of combining Gradient Descent with RMSProp and Momentum. So it inherits the learning rate $\\alpha$ parameter, as well as $\\beta_1$ from momentum and $\\beta_2$ from RMSProp. For a more in depth look at different optimizers, you can reference my implementation of neural nets from scratch in NumPy here.\n# W = 64 H = 64 output_path = './figures' #Define seed size seed_size = Y.shape[1] #Get models generator = get_generator(seed_size) discriminator = get_discriminator(X.shape[1:]) #Alpha and Beta1 may need tuning. Beta2 most likely does not alpha = 5.0e-6 beta_1 = 0.8 beta_2 = 0.999 #Get optimizers generator_optimizer = Adam(learning_rate=alpha, beta_1=beta_1, beta_2=beta_2) discriminator_optimizer = Adam(learning_rate=alpha, beta_1=beta_1, beta_2=beta_2) #Define parameters epochs = 500  train(dataset, epochs, seed_size)  WARNING:tensorflow:From /home/francisco/.local/lib/python2.7/site-packages/tensorflow_estimator/python/estimator/api/_v1/estimator/__init__.py:12: The name tf.estimator.inputs is deprecated. Please use tf.compat.v1.estimator.inputs instead. WARNING:tensorflow:From /usr/local/lib/python2.7/dist-packages/tensorflow_core/python/ops/nn_impl.py:183: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version. Instructions for updating: Use tf.where in 2.0, which has the same broadcast rule as np.where Epoch 1, gen loss=0.679988,disc loss=1.362854 76.512750 Epoch 2, gen loss=0.693136,disc loss=1.386321 72.690860 Epoch 3, gen loss=0.693149,disc loss=1.386317 75.233255  At this point, I realized my hardware was poorly equiped to handle the training, especially since I had to set the learning rate so small. So I copied my code to Google Colab and used their GPU power to run the model for $500$ epochs. The Generator and Discriminator Losses are plotted below (I absentmindedly forgot to include a plot for $i=499$ and I didnt want to run the training for another 3 hours, so bear with me):\nAdditionally, for each epoch I saved a set of images from the same seed to see how training progressed over time, which is quite fascinating:\n Exploring the Latent Space Initially, I had hoped that by feeding the generator feature vectors corresponding to the features outlined in the .csv files for each picture, the model would learn a very structured latent space that would be easy to navigate. However, I found the model to have a very large bias when I did this, so I had to opt for random seeds instead to obtain the results shown above.\nAs such, We need to explore this latent space to verify if there are ways of tweaking the output. If there are (hopefully orthogonalized) methods of accomplishing this, It will allow us to control the outputs we get, and be able to generate faces for our game of Guess Who.\nThe seeds fed into the generator during training matched the number of features described in each .csv file, so they have dimension $1\\times18$, taking values in the range $(-1,1)$\n#Path to latest model (generator model that is) model_path = './models/generator_500.h5' #Load generator generator = load_model(model_path, compile=False)  #Inference on random 1x18 vector X_i = tf.random.normal([1,18]) #Get image, in range (-1,1) y_hat = generator.predict(X_i)[0] #Process image to be (0,255) y = ((y_hat+1.0)*127.5).astype(np.int32) fig,ax = plt.subplots() fig.set_size_inches(12,12) fig.set_facecolor('w') ax.imshow(y) ax.set_title(X_i.numpy()) plt.axis('off') plt.show()  The image above is an example of inference done on the model. It actually looks quite a bit better than the images in the time-lapse above because its been rescaled to be in the range $(0,255)$ as intended.\nMy initial strategy to explore the latent space will be to have a baseline prediction of just zeros, and vary one feature at a time. I am not expecting the latent space to be orthogonalized like that, but it might give some indication of the changes that occur.\n#Inference on zeros 1x18 vector X_i = tf.zeros([1,18]) #Get image, in range (-1,1) y_hat = generator.predict(X_i)[0] #Process image to be (0,255) y = ((y_hat+1.0)*127.5).astype(np.int32) fig,ax = plt.subplots() fig.set_size_inches(12,12) fig.set_facecolor('w') ax.imshow(y) ax.set_title(X_i.numpy()) plt.axis('off') plt.show()  #Start with the inital row num_samples = 10 X = np.zeros([num_samples, 18]) samples = np.linspace(-1,1,num=num_samples) X[:,0] = samples Y = generator.predict(X) fig, ax = plt.subplots(1,num_samples) fig.set_size_inches(num_samples*2,12) fig.set_facecolor('w') for i in range(num_samples): y_hat = Y[i] y = ((y_hat+1.0)*127.5).astype(np.int32) ax[i].imshow(y) ax[i].set_title(\u0026quot;%.02f\u0026quot; % samples[i]) ax[i].axis('off') fig.tight_layout() plt.show() #Make a finer sampling for gif num_samples = 100 X = np.zeros([num_samples, 18]) samples = np.linspace(-1,1,num=num_samples) X[:,0] = samples Y = generator.predict(X) fig, ax = plt.subplots() fig.set_size_inches(12,12) fig.set_facecolor('w') for i in range(num_samples): y_hat = Y[i] y = ((y_hat+1.0)*127.5).astype(np.int32) ax.imshow(y) ax.axis('off') plt.savefig('./figures/feature_1/frame_%i' % i)  This is absolutely incredible! The latent space seems smooth. We can see, however, it is not orthogonalized, since by changing this parameter we change not only the hair style, but color and skin color as well.\n The next step is to do the same for every feature.\nnum_samples = 10 num_feats = 18 X = np.zeros([num_samples, num_feats]) samples = np.linspace(-1,1,num=num_samples) fig, ax = plt.subplots(num_feats,num_samples) fig.set_size_inches(num_samples*2,num_feats*2) fig.set_facecolor('w') for i in range(num_feats): X_i = np.copy(X) X_i[:,i] = samples Y = generator.predict(X_i) for j in range(num_samples): y_hat = Y[j] y = ((y_hat+1.0)*127.5).astype(np.int32) ax[i,j].imshow(y) ax[i,j].set_title(\u0026quot;Feature %i : %.02f\u0026quot; % (i+1,samples[j])) ax[i,j].axis('off') fig.tight_layout() plt.savefig('./figures/latentspace.png',dpi=200) plt.show()  Super Resolution / Upsampling Given the very large dataset of detailed images, we had to downscale the images to $64\\times64$ to be able to fit in memory during training.\nNow, I will train a super resolution model to upsample the images and obtain more detailed faces. I will be using the original dataset, in hopes that the GAN has learned a reasonable approximation to that distribution.\nNow, the original $500x500$ scale may be too large for adequate mapping. I\u0026rsquo;ll try with $256\\times256$.\nI\u0026rsquo;ll use a model architecture called VDSR, which stands for Very Deep Super Resolution. I review the paper here.\ndataset_path = './cartoonset10k/' #Set input width and height W_in = 64 H_in = 64 #Set output width and height W_out = 256 H_out = 256 X = [] Y = [] X_path = './super_res_X.npy' Y_path = './super_res_Y.npy' files = os.listdir(dataset_path) idx = np.random.randint(len(files), size=int(0.15*len(files))) for i,file_name in tqdm(enumerate(np.asarray(files)[idx]), desc='Reading Data'): #Ensure only look at the images, to avoid duplicates if '.png' in file_name: name = file_name.split('.')[0] #Images are .png image_path = os.path.join(dataset_path, name+'.png') #Read and resize image png_in = Image.open(image_path).resize((W_in,H_in),Image.ANTIALIAS) background_in = Image.new('RGBA', png_in.size, (0,0,0)) #Create alpha composite to avoid artifacts alpha_composite = Image.alpha_composite(background_in, png_in) img_in = np.asarray(alpha_composite)/127.5 - 1.0 #Get label png_out = Image.open(image_path).resize((W_out, H_out), Image.BICUBIC) background_out = Image.new('RGBA', png_out.size, (0,0,0)) #Create alpha composite to avoid artifacts alpha_composite = Image.alpha_composite(background_out, png_out) img_out = np.asarray(alpha_composite)/127.5-1.0 X.append(img_in) Y.append(img_out) #Convert to np X = np.asarray(X) Y = np.asarray(Y) X = np.reshape(X[...,:3],(-1,W_in, H_in, 3)) X = X.astype(np.float32) Y = np.reshape(Y[...,:3],(-1,W_out, H_out, 3)) Y = Y.astype(np.float32) #Save #np.save(X_path,X) #np.save(Y_path, Y) print('Done')  Reading Data: 3000it [00:21, 138.79it/s] Done  def super_res_model(input_shape, output_shape): X_in = Input(shape = input_shape) X = Conv2D(64, (3, 3), padding='same', kernel_initializer='he_normal')(X_in) X = Activation('relu')(X) for _ in range(18): X = Conv2D(64, (3, 3), padding='same', kernel_initializer='he_normal')(X) X = Activation('relu')(X) #Final layer for residual image X = Conv2D(1, (3, 3), padding='same', kernel_initializer='he_normal')(X) X = Add()([X, X_in]) model = Model(inputs = X_in, outputs = X) return model  #Set input width and height W_in = 64 H_in = 64 #Set output width and height W_out = 256 H_out = 256 #Resize input images with bicubic interpolation h_factor = H_out/H_in w_factor = W_out/ W_in X_resized = resize_images(X, h_factor, w_factor,data_format='channels_last',interpolation='bilinear') # model = super_res_model(X.shape[1:], Y.shape[1:]) # model.compile(optimizer='adam',loss='mean_absolute_error', metrics=['accuracy']) # model.summary()  lr = 0.000007 epochs = 75 model = super_res_model(X_resized.shape.as_list()[1:], Y.shape[1:]) model.compile(optimizer=Adam(lr=lr),loss='mean_absolute_error', metrics=['accuracy']) model.summary()  Model: \u0026quot;model\u0026quot; __________________________________________________________________________________________________ Layer (type) Output Shape Param # Connected to ================================================================================================== input_1 (InputLayer) [(None, 256, 256, 3) 0 __________________________________________________________________________________________________ conv2d (Conv2D) (None, 256, 256, 64) 1792 input_1[0][0] __________________________________________________________________________________________________ activation (Activation) (None, 256, 256, 64) 0 conv2d[0][0] __________________________________________________________________________________________________ conv2d_1 (Conv2D) (None, 256, 256, 64) 36928 activation[0][0] __________________________________________________________________________________________________ activation_1 (Activation) (None, 256, 256, 64) 0 conv2d_1[0][0] __________________________________________________________________________________________________ conv2d_2 (Conv2D) (None, 256, 256, 64) 36928 activation_1[0][0] __________________________________________________________________________________________________ activation_2 (Activation) (None, 256, 256, 64) 0 conv2d_2[0][0] __________________________________________________________________________________________________ conv2d_3 (Conv2D) (None, 256, 256, 64) 36928 activation_2[0][0] __________________________________________________________________________________________________ activation_3 (Activation) (None, 256, 256, 64) 0 conv2d_3[0][0] __________________________________________________________________________________________________ conv2d_4 (Conv2D) (None, 256, 256, 64) 36928 activation_3[0][0] __________________________________________________________________________________________________ activation_4 (Activation) (None, 256, 256, 64) 0 conv2d_4[0][0] __________________________________________________________________________________________________ conv2d_5 (Conv2D) (None, 256, 256, 64) 36928 activation_4[0][0] __________________________________________________________________________________________________ activation_5 (Activation) (None, 256, 256, 64) 0 conv2d_5[0][0] __________________________________________________________________________________________________ conv2d_6 (Conv2D) (None, 256, 256, 64) 36928 activation_5[0][0] __________________________________________________________________________________________________ activation_6 (Activation) (None, 256, 256, 64) 0 conv2d_6[0][0] __________________________________________________________________________________________________ conv2d_7 (Conv2D) (None, 256, 256, 64) 36928 activation_6[0][0] __________________________________________________________________________________________________ activation_7 (Activation) (None, 256, 256, 64) 0 conv2d_7[0][0] __________________________________________________________________________________________________ conv2d_8 (Conv2D) (None, 256, 256, 64) 36928 activation_7[0][0] __________________________________________________________________________________________________ activation_8 (Activation) (None, 256, 256, 64) 0 conv2d_8[0][0] __________________________________________________________________________________________________ conv2d_9 (Conv2D) (None, 256, 256, 64) 36928 activation_8[0][0] __________________________________________________________________________________________________ activation_9 (Activation) (None, 256, 256, 64) 0 conv2d_9[0][0] __________________________________________________________________________________________________ conv2d_10 (Conv2D) (None, 256, 256, 64) 36928 activation_9[0][0] __________________________________________________________________________________________________ activation_10 (Activation) (None, 256, 256, 64) 0 conv2d_10[0][0] __________________________________________________________________________________________________ conv2d_11 (Conv2D) (None, 256, 256, 64) 36928 activation_10[0][0] __________________________________________________________________________________________________ activation_11 (Activation) (None, 256, 256, 64) 0 conv2d_11[0][0] __________________________________________________________________________________________________ conv2d_12 (Conv2D) (None, 256, 256, 64) 36928 activation_11[0][0] __________________________________________________________________________________________________ activation_12 (Activation) (None, 256, 256, 64) 0 conv2d_12[0][0] __________________________________________________________________________________________________ conv2d_13 (Conv2D) (None, 256, 256, 64) 36928 activation_12[0][0] __________________________________________________________________________________________________ activation_13 (Activation) (None, 256, 256, 64) 0 conv2d_13[0][0] __________________________________________________________________________________________________ conv2d_14 (Conv2D) (None, 256, 256, 64) 36928 activation_13[0][0] __________________________________________________________________________________________________ activation_14 (Activation) (None, 256, 256, 64) 0 conv2d_14[0][0] __________________________________________________________________________________________________ conv2d_15 (Conv2D) (None, 256, 256, 64) 36928 activation_14[0][0] __________________________________________________________________________________________________ activation_15 (Activation) (None, 256, 256, 64) 0 conv2d_15[0][0] __________________________________________________________________________________________________ conv2d_16 (Conv2D) (None, 256, 256, 64) 36928 activation_15[0][0] __________________________________________________________________________________________________ activation_16 (Activation) (None, 256, 256, 64) 0 conv2d_16[0][0] __________________________________________________________________________________________________ conv2d_17 (Conv2D) (None, 256, 256, 64) 36928 activation_16[0][0] __________________________________________________________________________________________________ activation_17 (Activation) (None, 256, 256, 64) 0 conv2d_17[0][0] __________________________________________________________________________________________________ conv2d_18 (Conv2D) (None, 256, 256, 64) 36928 activation_17[0][0] __________________________________________________________________________________________________ activation_18 (Activation) (None, 256, 256, 64) 0 conv2d_18[0][0] __________________________________________________________________________________________________ conv2d_19 (Conv2D) (None, 256, 256, 1) 577 activation_18[0][0] __________________________________________________________________________________________________ add (Add) (None, 256, 256, 3) 0 conv2d_19[0][0] input_1[0][0] ================================================================================================== Total params: 667,073 Trainable params: 667,073 Non-trainable params: 0 __________________________________________________________________________________________________  history = model.fit(X_resized.numpy(),Y,batch_size=1,epochs=60,validation_split=0.10)  model_name = 'super_res_%f_%i' % (lr, epochs) model.save('/content/gdrive/My Drive/Colab Notebooks/GAN/' + model_name + '.h5') fig, ax = plt.subplots() fig.set_size_inches(12,12) fig.set_facecolor('w') ax.plot(history.history['accuracy'], label = 'accuracy') ax.plot(history.history['val_accuracy'], label = 'validation_accuracy') ax2 = ax.twinx() ax2.plot(history.history['loss'], label = 'mse_loss') ax2.plot(history.history['val_loss'], label = 'validation_mse_loss') plt.legend() plt.savefig('/content/gdrive/My Drive/Colab Notebooks/GAN/' + model_name+'_history.png') plt.show()  Unfortunately, my poor computer wasn\u0026rsquo;t able to load the large tensors into RAM, even only using 20% of the dataset. So I trained the model in Google collab once more.\nHere is a sample input from that model\nEstabishing the Pipeline So we have two trained models. The first one is the generator that takes in a vector of noise and outputs an image of dimension $64\\times 64\\times 3$.\nWe also have a trained VDSR model that takes in images of dimension $256\\times 256\\times 3$ and outputs images of dimension $256\\times 256\\times 3$.\nThe inputs to the VDSR model are bicubic resizes of the $64\\times 64\\times 3$ outputs.\n#Path to latest generator model gen_model_path = './models/generator_500.h5' #Path to super resolution model res_model_path = './models/super_res_0.000007_75.h5' #Load generator generator = load_model(gen_model_path, compile=False) #Load super resolution model super_res_model = load_model(res_model_path, compile=False)  ## Params #Set input width and height W_in = 64 H_in = 64 #Set output width and height W_out = 256 H_out = 256 #Resize factor h_factor = H_out/H_in w_factor = W_out/ W_in ## Generator #Inference on random 1x18 vector X_i = tf.random.normal([1,18]) #Get image, in range (-1,1) y_hat = generator.predict(X_i)[0] #Process image to be (0,255) y = ((y_hat+1.0)*127.5).astype(np.int32) ## Super Resolution #Resize y_resized = resize_images(np.expand_dims(y_hat, axis=0), h_factor, w_factor,data_format='channels_last',interpolation='bilinear') #Get super resolution prediction super_res_hat = super_res_model.predict(y_resized)[0] #Process image to be (0,255) super_res = ((super_res_hat+1.0)*127.5).astype(np.int32) ## Plotting fig,ax = plt.subplots(1,2) fig.set_size_inches(24,12) fig.set_facecolor('w') ax[0].imshow(y) ax[0].set_title(X_i.numpy()) ax[1].imshow(super_res) ax[1].set_title('Super Resolution') plt.axis('off') plt.show()  ","date":1593204017,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593204017,"objectID":"a09b118502d37ab890ca993d3ba73b64","permalink":"https://Fquico1999.github.io/project/ganwho/","publishdate":"2020-06-26T13:40:17-07:00","relpermalink":"/project/ganwho/","section":"project","summary":"Guess Who implementation with GAN generated and VDSR upscaled images.","tags":["Deep Learning"],"title":"GAN Who","type":"project"},{"authors":["Jiwon Kim","Jung Kwon Lee","Kyoung Mu Lee"],"categories":[],"content":"Find the paper here\nAt a Glance  The paper proposes an effective model for single image super resolution that is highly accurate. Increasing the model depth increases overall accuracy. Contextual information over large regions is built up by cascading multiple smaller filters. Convergence speed is maximized by learning only residuals, and using large learning rates with adjustable gradient clipping. May be usefull in denoising and compression artifact removal  Introduction The goal of the paper is to introduce a single image super resolution (SISR) model that addresses some of the limitations of a previously proposed framework, the SRCNN.\nThe advantages of using CNNs for super resolution is that they provide an effective end-to-end solution, whereas past work required hand-engineered features.\nThe paper lists three limitations of SRCNNs and how VDSR can address these:\n  SRCNN is context dependent in small images - Information in a small patch does not hold enough information for detail recovery. VDSR addresses this by cascading small filters to capture large region information.\n  Training for deep CNNs is slow - VDSR addresses this by only learning residuals - the difference between the Low Resolution (LR) and High Resolution (HR) images. This works because the LR and HR images share the same information to a very large extent. Additionally, very large learning rates are used during training, with adjustable gradient clipping.\n  SRCNN only works for a single scale - A single VDSR model is adequate for multi-scale-factor super resolution.\n  Proposed Method Proposed Network The network takes in an interpolated LR (ILR) image of shape $w \\times h \\times 3$ and predicts the residual image ($ w \\times h \\times 1$) which is then added onto the ILR to yield the HR image ($w \\times h \\times 3$).\nThe network is comprised of $L$ layers where all but $l=1,20$ (first and last) follow ZEROPAD -\u0026gt; CONV($3\\times 3, 64 \\text{ filters}$) -\u0026gt; RELU. The first layer operates on the input and the last layer consists of ZEROPAD -\u0026gt; CONV($3\\times 3, 1 \\text{ filter}$) to output the desired residual image.\nThe purpose of zero-padding before each convolution is to preserve the size of the feature maps. One issue with deep CNNs is that the convolution operation reduces the size of the feature map. Pixels on the border cannot be inferred properly, so usually SISR methods crop the boundary out which is fine for shallow models, but for deep CNNs it is unfeasible. Zero-padding addresses this issue, and is reported to work well.\n$L$ is specified to be $20$ in the paper\u0026rsquo;s training description.\nTraining The Loss function was the mean squared error averaged over the training set: $\\frac{1}{2} || \\pmb{y} - \\pmb{\\hat{y}}||^2$, where $\\pmb{y}$ is the HR image corresponding to the input LR image, and $\\pmb{\\hat{y}}$ is the model predicted HR image.\nResidual Learning The residual image is defined as $\\pmb{r}=\\pmb{y}-\\pmb{x}$. Most values are likely to be small or zero, which is desirable when training. Since we want the network to predict the residual $\\pmb{r}$, the loss function can be rewritten as $\\frac{1}{2} || \\pmb{r} - \\pmb{\\hat{y}}||^2$. However, in the actual network training, the loss is the $L_2$ norm betweeen the reconstructed image $\\pmb{r}+\\pmb{x}$ and the ground truth $\\pmb{y}$.\nMini-batch Gradient Descent was used with a momentum optimizer (I assume, as the paper references momentum $\\beta = 0.9$, could also be the Adam optimizer) and a weight decay of $0.0001$ (weight decay means adding a regularizing term to the loss, $\\mathcal{L} = \\frac{1}{2} || \\pmb{y} - \\pmb{\\hat{y}}||^2 + \\gamma L_2, \\gamma=0.0001$)\nAdjustable Gradient Clipping An issue when training deep CNNs is the slow speed of convergence. One tactic to speed up training is to increase the learning rate $\\alpha$, however this can lead to exploding gradients.\nOne solution to this is referred to as Gradient Clipping where the gradients of the parameters with respect to the loss function are clipped between a certain range $[-\\theta, \\theta]$. The issue with this approach is that, at the start of training when the learning rate is very high, $\\theta$ must be very small to prevent exploding gradients, however as the network is trained, learning rate is annealed and as such $\\alpha \\frac{\\partial{\\mathcal{L}}}{\\partial{W}}$ gets increasingly smaller.\nThe suggested method is to set gradients between $[-\\frac{\\theta}{\\alpha}, \\frac{\\theta}{\\alpha}]$, so the clipping is adjusted based on the current learning rate.\nMulti-Scale The model can be adapted to handle mutliple scales by simply training it on data of varying scales. Images are divided into sub-images without overlap where sub-images from different scales are present.\nThe paper tests the performance of a model trained with $s_{train}=\\{2\\}$ (scale factor of 2 in the training set) on different input scales and sees that for $s_{train} \\ne s_{test}$, performance is bad. However when $s_{train}=\\{2,3,4\\}$ the performance at each scale factor is comparable with a corresponding single-scale network, even outperforming single-scale models at large scales (3,4).\nResults VDSR outperforms Bicubic, A+, RFL, SelfEx, and SRCNN (all methods listed) in every regard (PSNR/SSIM/time).\nBenchmarks were made on Set5, Set14, B100 and Urban100 datasets.\nImplementation After reading the paper, I decided to implement VDSR in Keras. Please note this is a very quick-and-dirty implementation, it forgoes the adjustable gradient clipping and the learning rate adjustments made in the paper.\nI also test the model on one of the classes in the CIFAR10 dataset, namely the frog class.\nimport numpy as np import matplotlib.pyplot as plt import cv2 import tensorflow as tf from tensorflow.keras.models import Model from tensorflow.keras.layers import Conv2D, ZeroPadding2D, ReLU, Add, Input from tensorflow.keras.optimizers import Adam from tensorflow.keras.datasets import cifar10 from tensorflow.keras.backend import resize_images  def vdsr(input_dim, l): #Define input layer LR = Input(shape=input_dim, name='input') #First convolution X = ZeroPadding2D()(LR) X = Conv2D(64,(3,3), name='CONV1')(X) X = ReLU()(X) #Repeat convolution layers untill last layer for i in range(l-2): X = ZeroPadding2D()(X) X = Conv2D(64, (3,3), name='CONV%i' % (i+2))(X) X = ReLU()(X) #Final layer, output is residual image X = ZeroPadding2D()(X) residual = Conv2D(1, (3,3), name='CONV%i' % l)(X) #Add residual to LR out = Add()([LR, residual]) return Model(LR, out)  #Load the cifar10 dataset (x_train, y_train), (x_test, y_test) = cifar10.load_data() classes = ['airplane','automobile','bird','cat','deer','dog','frog', 'horse','ship','truck'] #Example image i = np.random.randint(x_train.shape[0]) plt.imshow(x_train[i]) plt.axis('off') plt.title(classes[y_train[i][0]], color='w') plt.show()  #I'll use just the frog classes train_idx = (y_train == [classes.index('frog')]) y_train = x_train[np.squeeze(train_idx)] test_idx = (y_test == [classes.index('frog')]) y_test = x_test[np.squeeze(test_idx)] print(\u0026quot;Training set ground truth has shape: \u0026quot; + str(y_train.shape)) print(\u0026quot;Test set ground truth has shape: \u0026quot; + str(y_test.shape))  Training set ground truth has shape: (5000, 32, 32, 3) Test set ground truth has shape: (1000, 32, 32, 3)  w , h = y_train.shape[1:-1] scale_factor = 2 x_train = [] for img in y_train: img_re = cv2.resize(img, dsize=(w/scale_factor, h/scale_factor), interpolation=cv2.INTER_CUBIC) x_train.append(img_re) x_train = np.asarray(x_train) x_test = [] for img in y_test: img_re = cv2.resize(img, dsize=(w/scale_factor, h/scale_factor), interpolation=cv2.INTER_CUBIC) #Normalize x_test.append(img_re) x_test = np.asarray(x_test) print(\u0026quot;Training set has shape: \u0026quot; + str(x_train.shape)) print(\u0026quot;Test set has shape: \u0026quot; + str(x_test.shape))  Training set has shape: (5000, 16, 16, 3) Test set has shape: (1000, 16, 16, 3)  #Example sample and label i = np.random.randint(x_train.shape[0]) fig, ax = plt.subplots(1,2) fig.set_size_inches(12,6) fig.set_facecolor('w') ax[0].imshow(x_train[i]) ax[0].set_title('X', fontsize=14) ax[0].axis('off') ax[1].imshow(y_train[i]) ax[1].set_title('Y', fontsize=14) ax[1].axis('off') plt.axis('off') plt.show()  #Define the model input_dim = y_train.shape[1:] L = 20 model = vdsr(input_dim, L) model.compile(optimizer=Adam(learning_rate=0.000075,beta_1=0.9), loss='mse', metrics=['accuracy'])  #Need to upscale input x_train_scaled = resize_images(x_train/255.0, scale_factor, scale_factor,'channels_last', interpolation='bilinear') x_test_scaled = resize_images(x_test/255.0, scale_factor, scale_factor,'channels_last', interpolation='bilinear') history = model.fit(x_train_scaled, y_train/255., batch_size=64, epochs=10, validation_data=(x_test_scaled, y_test/255.0))  Train on 5000 samples, validate on 1000 samples Epoch 1/10 5000/5000 [==============================] - 138s 28ms/sample - loss: 0.0030 - accuracy: 0.9441 - val_loss: 0.0028 - val_accuracy: 0.9451 Epoch 2/10 5000/5000 [==============================] - 138s 28ms/sample - loss: 0.0027 - accuracy: 0.9441 - val_loss: 0.0027 - val_accuracy: 0.9451 Epoch 3/10 5000/5000 [==============================] - 139s 28ms/sample - loss: 0.0026 - accuracy: 0.9441 - val_loss: 0.0026 - val_accuracy: 0.9451 Epoch 4/10 5000/5000 [==============================] - 133s 27ms/sample - loss: 0.0026 - accuracy: 0.9441 - val_loss: 0.0026 - val_accuracy: 0.9451 Epoch 5/10 5000/5000 [==============================] - 135s 27ms/sample - loss: 0.0025 - accuracy: 0.9441 - val_loss: 0.0026 - val_accuracy: 0.9451 Epoch 6/10 5000/5000 [==============================] - 142s 28ms/sample - loss: 0.0025 - accuracy: 0.9441 - val_loss: 0.0025 - val_accuracy: 0.9451 Epoch 7/10 5000/5000 [==============================] - 132s 26ms/sample - loss: 0.0025 - accuracy: 0.9441 - val_loss: 0.0025 - val_accuracy: 0.9451 Epoch 8/10 5000/5000 [==============================] - 140s 28ms/sample - loss: 0.0025 - accuracy: 0.9441 - val_loss: 0.0025 - val_accuracy: 0.9451 Epoch 9/10 5000/5000 [==============================] - 133s 27ms/sample - loss: 0.0025 - accuracy: 0.9441 - val_loss: 0.0025 - val_accuracy: 0.9451 Epoch 10/10 5000/5000 [==============================] - 130s 26ms/sample - loss: 0.0024 - accuracy: 0.9441 - val_loss: 0.0025 - val_accuracy: 0.9451  fig, ax = plt.subplots() fig.set_size_inches(12,12) fig.set_facecolor('w') ax.plot(history.history['loss'], label='loss') ax.plot(history.history['val_loss'], label='val_loss') plt.legend() plt.show()  #Example sample and label i = np.random.randint(x_train.shape[0]) x_i = resize_images(np.expand_dims(x_train[i],axis=0), scale_factor, scale_factor,'channels_last', interpolation='bilinear') y_hat = model.predict(x_i/255.0)[0] fig, ax = plt.subplots(1,3) fig.set_size_inches(12,6) fig.set_facecolor('w') ax[0].imshow(x_train[i]) ax[0].set_title('X', fontsize=14) ax[0].axis('off') ax[1].imshow(y_train[i]) ax[1].set_title('Y', fontsize=14) ax[1].axis('off') ax[2].imshow(y_hat) ax[2].set_title('Y_hat', fontsize=14) ax[2].axis('off') plt.axis('off') plt.show()  The model seems to work well and converges quickly, even for a fixed learning rate. Of note is that the CIFAR10 images are of size $32\\times 32 \\times 3$, so to test super resolution with a scale factor of 2, the input images are resized from $16 \\times 16 \\times 3$. Compared to Set5\u0026rsquo;s $256 \\times 256 \\times 3$ images used in the paper, this test isn\u0026rsquo;t reflective of VDSR\u0026rsquo;s ability to infer detail.\n","date":1593193032,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593193032,"objectID":"1c4c42a6b235d74c57aee4a741580d76","permalink":"https://Fquico1999.github.io/post/vdsr_paper/","publishdate":"2020-06-26T10:37:12-07:00","relpermalink":"/post/vdsr_paper/","section":"post","summary":"Using a Deep CNN to achieve highly accurate single-image super-resolution","tags":[],"title":"Accurate Image Super-Resolution Using Very Deep Convolutional Networks","type":"post"},{"authors":[],"categories":[],"content":"You can find this repository here\nOverview In an attempt to test and further my understanding of the mathematics and logistics behind neural networks and how they operate, I decided to follow what I learned in deeplearning.ai\u0026rsquo;s Neural Networks and Deep Learning course and implement Neural Networks from scratch using only NumPy.\nOutline To build a neural net from scratch, we need to go over each block and code those individually. At the end we can combine all of these to create an $L$-layer NN.\nSo, the steps we need to take are:\n Parameter Intialization: We need to initialize parameters $W$ and $b$ Compute a forward propagation pass: This involves computing the linear pass - $Z^{[l]}=W^{[l]}A^{[l-1]}+b^{[l]}$ - and the activation $A^{[l]}=g(Z^{[l]})$ for both Sigmoid and ReLU activations Compute the loss Implement a back propagation pass Update the parameters: Here I'll code in mini Batch Gradient Descent (Which will cover both Stochastic Gradient Descent as well as Batch Gradient Descent), Momentum, RMSProp, and the king of them all, Adam  import math import numpy as np import matplotlib.pyplot as plt  Activation Functions To add non-linearity to the model, activation functions are used. I\u0026rsquo;ll define them now. I\u0026rsquo;ll be using ReLU (rectified linear unit) and sigmoid in an example, but I\u0026rsquo;ll also define tanh and leaky ReLU.\ndef relu(Z): \u0026quot;\u0026quot;\u0026quot; Arguments: Z -- output of linear function Z = W*A+b Returns: ret -- ReLU(Z) Z -- input for use in backprop \u0026quot;\u0026quot;\u0026quot; return np.maximum(0,Z), Z def sigmoid(Z): \u0026quot;\u0026quot;\u0026quot; Arguments: Z -- output of linear function Z = W*A+b Returns: ret -- sigmoid(Z) Z -- input for use in backprop \u0026quot;\u0026quot;\u0026quot; return 1./(1.+np.exp(-Z)), Z def tanh(Z): \u0026quot;\u0026quot;\u0026quot; Arguments: Z -- output of linear function Z = W*A+b Returns: ret -- tanh(Z) Z -- input for use in backprop \u0026quot;\u0026quot;\u0026quot; return np.tanh(Z), Z def leaky_relu(Z): \u0026quot;\u0026quot;\u0026quot; Arguments: Z -- output of linear function Z = W*A+b Returns: ret -- leaky_relu(Z) Z -- input for use in backprop \u0026quot;\u0026quot;\u0026quot; return np.maximum(0.01*Z, Z), Z  Parameter Initialization For passing parameter information between different functions, I\u0026rsquo;ll use a dictionary parameters, which will store $W$ and $b$ values for each layer $l {l:{0\\le l \\le L}}$\nAdditionally, I\u0026rsquo;ll implement random, Xavier initialization, and He initialization.\n Random Initialization: Samples values from a normal distribution, and multiplies by a small value to keep weights close to zero - regularization Xavier Initialization: random sampling is multiplied by constant $\\sqrt{\\frac{1}{\\text{previous layer dimension}}}$ He Initialization: random sampling is multiplied by constant $\\sqrt{\\frac{2}{\\text{previous layer dimension}}}$  def initialize_parameters(model_shape, initialization_method='he'): \u0026quot;\u0026quot;\u0026quot; Initializes parameters W and b of a network of shape model_shape. Arguments: model_shape -- list containing the dimensions of each network layer l Returns: parameters -- dictionary containing weight and bias parameters \u0026quot;\u0026quot;\u0026quot; #define dictionary params = {} #Obtain L L = len(model_shape) #Check initialization_method if initialization_method == 'random': beta = 0.01 for l in range(1,L): params[\u0026quot;W\u0026quot;+str(l)] = np.random.randn(model_shape[l], model_shape[l-1])*beta params[\u0026quot;b\u0026quot;+str(l)] = np.zeros([model_shape[l], 1]) elif initialization_method == 'xavier': L = L-1 for l in range(1,L+1): beta = np.sqrt(1./model_shape[l-1]) params[\u0026quot;W\u0026quot;+str(l)] = np.random.randn(model_shape[l], model_shape[l-1])*beta params[\u0026quot;b\u0026quot;+str(l)] = np.zeros([model_shape[l], 1]) elif initialization_method == 'he': L = L - 1 for l in range(1,L+1): beta = np.sqrt(2./model_shape[l-1]) params[\u0026quot;W\u0026quot;+str(l)] = np.random.randn(model_shape[l], model_shape[l-1])*beta params[\u0026quot;b\u0026quot;+str(l)] = np.zeros([model_shape[l], 1]) else: raise NameError(\u0026quot;%s is not a valid initalization method\u0026quot;%(initialization_method)) return params  Forward Propagation Forward propagation refers to passing through the computation graph from left to right - forwards - and evaluating $Z^{[l]}=W^{[l]}A^{[l-1]}+b^{[l]}$ for each sucessive $l$ starting with $l=1$, in which case $A^{[0]}=X$, in other words, the activation fed into the first layer is simply the inputs.\nTo accomplish this, I\u0026rsquo;ll create two functions. The first will evaluate the linear formula $Z^{[l]}=W^{[l]}A^{[l-1]}+b^{[l]}$, whereas the second will evaluate $A^{[l]} = g(Z^{[l]})$, which corresponds to evaluating the activation function.\nThen forward_prop implements both to complete a forward propagation pass.\nIn order to compute the backprop later onwards, I\u0026rsquo;ll need to store $A^{[l]}$,$W^{[l]}$, $b^{[l]}$ as well as $Z^{[l]}$ which I\u0026rsquo;ll do in linear cache and activation cache\nOne of the arguments of forward_prop is layer_activations, which is a list of the activations for each layer of the neural network.\ndef forward_linear(W,A,b): \u0026quot;\u0026quot;\u0026quot; Linear part of forward propagation Arguments: W -- weight matrix A -- activations b -- bias matrix Returns: Z -- input to the layer's activation function linear_cache -- tuple with A, W, b for efficient backprop \u0026quot;\u0026quot;\u0026quot; Z = np.dot(W,A)+b linear_cache = (A,W,b) assert(Z.shape == (W.shape[0], A.shape[1])) return Z, linear_cache  def forward_activation(Z, activation): \u0026quot;\u0026quot;\u0026quot; Arguments: Z -- Output of linear function Z = WA_prev+b activation -- String denoting activation function to use. One of [linear, sigmoid, relu, leaky_relu, tanh, softmax] Returns: A -- g(Z), where g() is the corresponding activation activation_cache -- the input Z, which will be fed into backprop \u0026quot;\u0026quot;\u0026quot; if activation == 'linear': A, activation_cache = Z, Z elif activation == 'sigmoid': A, activation_cache = sigmoid(Z) elif activation == 'relu': A, activation_cache = relu(Z) elif activation == 'leaky_relu': A, activation_cache = leaky_relu(Z) elif activation == 'tanh': A, activation_cache = tanh(Z) else: raise NameError('%s is not a valid activation function' %(activation)) return A, activation_cache  def forward_prop(X, layer_activations, parameters): \u0026quot;\u0026quot;\u0026quot; Implements one pass of forward propagation Arguments: X -- input data layer_activations -- list of strings corresponding to the activations of each layer parameters -- output of initialize_parameters Returns: A - Output of activation function of the last layer caches - list of caches containing both linear and activation caches \u0026quot;\u0026quot;\u0026quot; #Define caches caches = [] #A[0] is the input A = X L = len(parameters)//2 for l in range(1, L+1): A_prev = A W = parameters[\u0026quot;W\u0026quot;+str(l)] b = parameters[\u0026quot;b\u0026quot;+str(l)] Z, linear_cache = forward_linear(W, A_prev, b) A, activation_cache = forward_activation(Z, layer_activations[l]) assert (A.shape == (W.shape[0], A_prev.shape[1])) #Add both linear and activation cache to caches caches.append((linear_cache, activation_cache)) return A, caches  Cost Function The cost function is the metric that a neural net aims to minimize. I\u0026rsquo;ll implement cross-entropy cost, given by:\n$$-\\frac{1}{m} \\sum\\limits_{i = 1}^{m} (y^{(i)}\\log\\left(a^{[L](i)}\\right) + (1-y^{(i)})\\log\\left(1- a^{[L](i)}\\right))$$\nThus, we require a method of computing cost after one pass of forward propagation.\ndef cost(A_last, Y): \u0026quot;\u0026quot;\u0026quot; Arguments: A_last -- Post-activation value of the last layer of the network Y -- Groud truth vectors Returns: cost -- cross-entropy cost \u0026quot;\u0026quot;\u0026quot; #Get number of samples, m m = Y.shape[1] #Compute cross entropy cost cost = -(1.0/m)*np.sum(Y*np.log(A_last)+(1.-Y)*np.log(1.-A_last)) #Ensure appropriate dimensions cost = np.squeeze(cost) return cost  Back Propagation To update our parameters, we need to calculate the gradient of the loss with respect to $W$ and $b$\nJust like with forward prop, I will implement two functions. One deals with the back pass for the linear part of the units and the other deals with the derivatives of the activation functions.\nFor the linear part, we take the derivatives of the parameters, obtaining:\n$$ dW^{[l]} = \\frac{1}{m} dZ^{[l]} A^{[l-1] T} $$ $$ db^{[l]} = \\frac{1}{m} \\sum_{i = 1}^{m} dZ^{[l](i)}$$ $$ dA^{[l-1]} = W^{[l] T} dZ^{[l]} $$\nFor the activation part, the backprop requires the gradient of the activation function. As such it depends on the activation used, and I\u0026rsquo;ll define them for each one.\nFor sigmoid:\n$$ \\sigma{(z)} = \\frac{1}{1+e^{-x}}$$ $$\\frac{d\\sigma{(z)}}{dz} = \\sigma{(z)}(1-\\sigma{(z)})$$\nFor ReLU:\n$$\\text{ReLU}(z) = \\max{(0,z)}$$ $$\\frac{d\\text{ReLU}}{dz} = \\left\\{\\begin{array}{ll}1 , z \u0026gt; 0\\\\0, z \\le 0\\end{array}\\right.$$\nNote that for ReLU, strictly speaking, there is a discontinuity at $z=0$, however since it is incredibly unlikely that the input to the function will every be exactly zero, it\u0026rsquo;s fine to include it in $z\\le0$\nFor tanh: $$\\tanh{(z)} = \\frac{e^{z}-e^{-z}}{e^{z}+e^{-z}}$$ $$\\frac{d\\tanh(z)}{dz} = 1-\\tanh^2(z)$$\nFor leaky ReLU: $$\\text{leaky ReLU}(z) = \\max(0.01z, z)$$ $$\\frac{d(\\text{leaky Relu}(z))}{dz} = \\left\\{\\begin{array}{ll}1 , z \u0026gt; 0\\\\0.01, z \\le0\\end{array}\\right.$$\nSo, I\u0026rsquo;ll implement functions for each of these units to compute: $$dZ^{[l]} = dA^{[l]} * g\u0026rsquo;(Z^{[l]})$$\nAdditionally, to initialize backpropagation, we need $\\frac{d\\mathcal{L}}{dA^{[L]}}$, the gradient of the cost function with respect to the last activation output. For cross-entropy this is: $$-\\sum\\limits_{i=1}^{m}\\frac{y^{i}}{a^{[L](i)}} - \\frac{1-y^{i}}{1-a^{[L](i)}}$$\ndef backward_linear(dZ, cache): \u0026quot;\u0026quot;\u0026quot; Arguments: dZ -- Gradient of cost w.r.t linear portion cache -- tuple coming from cached forward prop of layer l Returns: dA_prev -- gradient with respect to activation of previous layer dW -- gradient with respect to weights of current layer db -- gradient with respect to biases of current layer \u0026quot;\u0026quot;\u0026quot; #unpack cache A_prev, W, b = cache #Get number of samples m = A_prev.shape[1] dW = 1./m*np.dot(dZ, A_prev.T) db = 1./m*np.sum(dZ, axis=1, keepdims=True) dA_prev = np.dot(W.T, dZ) assert (dA_prev.shape == A_prev.shape) assert (dW.shape == W.shape) assert (db.shape == b.shape) return dA_prev, dW, db  def backward_activation(dA, Z, activation): \u0026quot;\u0026quot;\u0026quot; Arguments: dA -- post-activation gradient for current layer l Z -- cached matrix from forward prop activation -- the activation to be used in the layer Returns: dZ -- gradient of cost function with respect to Z[l] \u0026quot;\u0026quot;\u0026quot; if activation == 'linear': dZ = dA elif activation == \u0026quot;relu\u0026quot;: dZ = np.array(dA, copy=True) dZ[Z \u0026lt;= 0] = 0 elif activation == \u0026quot;sigmoid\u0026quot;: s = 1./(1+np.exp(-Z)) dZ = dA * s * (1-s) elif activation == \u0026quot;leaky_relu\u0026quot;: dZ = np.array(dA, copy=True) dZ[Z \u0026lt;= 0] = 0.01 elif activation == \u0026quot;tanh\u0026quot;: dZ = dA*(1 - tanh(Z)**2) else: raise NameError(\u0026quot;%s is not a valid activation function\u0026quot; % (activation)) assert(dZ.shape == Z.shape) return dZ  def backward_prop(AL, Y, caches, layer_activations): \u0026quot;\u0026quot;\u0026quot; Implement a backward propagation pass Arguments: AL -- output of the forward propagation Y -- ground truth caches -- list of caches containing linear_cache and activation_cache Returns: grads -- A dictionary with the gradients dA[l], dW[l], db[l] \u0026quot;\u0026quot;\u0026quot; #Define dict to store gradients for parameter update grads = {} L = len(caches) m = AL.shape[1] #Ensure Y is the same as AL (which is essentially y_hat) Y = Y.reshape(AL.shape) #Initialize backprop, a.k.a derivative of cost with respect to AL dAL = -(np.divide(Y, AL) - np.divide(1 - Y, 1 - AL)) grads[\u0026quot;dA\u0026quot;+str(L)] = dAL for l in reversed(range(L)): current_cache = caches[l] linear_cache, activation_cache = current_cache dZ = backward_activation(grads[\u0026quot;dA\u0026quot;+str(l+1)],activation_cache, layer_activations[l]) dA_prev, dW, db = backward_linear(dZ, linear_cache) grads[\u0026quot;dA\u0026quot; + str(l)] = dA_prev grads[\u0026quot;dW\u0026quot; + str(l + 1)] = dW grads[\u0026quot;db\u0026quot; + str(l + 1)] = db return grads  Update Parameters The final step is to take the gradients computed in back propagation and use them to update the parameters $W$ and $b$.\nThe method of updating these parameters is important and there are several optimizers that do this in different ways.\n Mini-Batch Gradient Descent: $$ W:=W-\\alpha dW $$ $$ b:=b-\\alpha db $$  For the other optimization algorithms, the concept of exponentially weighted averages becomes an important one. An exponentially weighted average can be calculated with the following formula: $$v_{\\theta, i} := \\beta v_{\\theta, i} + (1-\\beta)\\theta_{i}$$\nWhere $\\theta_{i}$ are the samples in the dataset to average over. The parameter $\\beta$ roughly controls how many samples to average over given by approximately $\\frac{1}{1-\\beta}$. Most commonly in momentum, $\\beta=0.9$, which works out to averaging over the last 10 samples.\n Momentum: $$ \\begin{cases} v_{dW^{[l]}} := \\beta v_{dW^{[l]}} + (1 - \\beta) dW^{[l]} \\\\\nW^{[l]} := W^{[l]} - \\alpha v_{dW^{[l]}} \\end{cases}$$  $$\\begin{cases} v_{db^{[l]}} := \\beta v_{db^{[l]}} + (1 - \\beta) db^{[l]} \\\\\nb^{[l]} := b^{[l]} - \\alpha v_{db^{[l]}} \\end{cases}$$\n RMSProp: $$ \\begin{cases} s_{dW^{[l]}} := \\beta s_{dW^{[l]}} + (1 - \\beta) (dW^{[l]})^{2} \\\\\nW^{[l]} := W^{[l]} - \\alpha \\frac{dW^{[l]}}{\\sqrt{s_{dW^{[l]}}}+\\epsilon} \\end{cases}$$  $$\\begin{cases} s_{db^{[l]}} := \\beta s_{db^{[l]}} + (1 - \\beta) (db^{[l]})^{2} \\\\\nb^{[l]} := b^{[l]} - \\alpha \\frac{db^{[l]}}{\\sqrt{s_{db^{[l]}}}+\\epsilon} \\end{cases}$$\nNote the addition of $\\epsilon$ in the denominator in both RMSProp and Adam. That is to prevent NaNs or divisions by zero, it increases numerical stability. The king of the optimizers, Adam, works by combining both momentum and RMSProp. Additionally, it also adds bias correction to the exponentially weighted averages $v$ and $s$. The need for bias correction comes from the fact that as the number of samples that we average over increases, the beginning of the averaging causes the output to be very small since at the start we only have one sample and the others are initialized to zero. As such, the start of our averaging results in a much lower start than the original distribution.\n Adam: $$\\begin{cases} v_{dW^{[l]}} := \\beta_1 v_{dW^{[l]}} + (1 - \\beta_1) dW^{[l]} \\\\\nv^{corrected}_{dW^{[l]}} = \\frac{v_{dW^{[l]}}}{1 - (\\beta_1)^t} \\\\\ns_{dW^{[l]}} := \\beta_2 s_{dW^{[l]}} + (1 - \\beta_2) (dW^{[l]})^2 \\\\\ns^{corrected}_{dW^{[l]}} = \\frac{s_{dW^{[l]}}}{1 - (\\beta_2)^t} \\\\\nW^{[l]} := W^{[l]} - \\alpha \\frac{v^{corrected}_{dW^{[l]}}}{\\sqrt{s^{corrected}_{dW^{[l]}}} + \\varepsilon} \\end{cases}$$  $$\\begin{cases} v_{db^{[l]}} := \\beta_1 v_{db^{[l]}} + (1 - \\beta_1) db^{[l]} \\\\\nv^{corrected}_{db^{[l]}} = \\frac{v_{db^{[l]}}}{1 - (\\beta_1)^t} \\\\\ns_{db^{[l]}} := \\beta_2 s_{db^{[l]}} + (1 - \\beta_2) (db^{[l]})^2 \\\\\ns^{corrected}_{db^{[l]}} = \\frac{s_{db^{[l]}}}{1 - (\\beta_2)^t} \\\\\nb^{[l]} := b^{[l]} - \\alpha \\frac{v^{corrected}_{db^{[l]}}}{\\sqrt{s^{corrected}_{db^{[l]}}} + \\varepsilon} \\end{cases}$$\nThe $t$ parameter in Adam included in the bias correction formula is the number of steps taken.\nBesides functions to update these parameters, we also need functions to initialize them (except for gradient descent)\n## Gradient Descent def update_parameters_gd(parameters, grads, learning_rate=0.01): \u0026quot;\u0026quot;\u0026quot; Arguments: parameters -- parameters W and b grads -- gradients from backprop - dW and db Returns: parameters -- parameters W and b updated using gradient descent update rules \u0026quot;\u0026quot;\u0026quot; L = len(parameters) // 2 # number of layers for l in range(L): parameters[\u0026quot;W\u0026quot; + str(l+1)] = parameters[\u0026quot;W\u0026quot; + str(l+1)] - learning_rate*grads[\u0026quot;dW\u0026quot;+str(l+1)] parameters[\u0026quot;b\u0026quot; + str(l+1)] = parameters[\u0026quot;b\u0026quot; + str(l+1)]- learning_rate*grads[\u0026quot;db\u0026quot;+str(l+1)] return parameters ## Momentum def initialize_parameters_momentum(parameters): \u0026quot;\u0026quot;\u0026quot; Arguments: parameters -- dictionary containing parameters W,b Returns: velocities -- initialized velocities for momentum updates \u0026quot;\u0026quot;\u0026quot; L = len(parameters) // 2 velocities = {} # Initialize velocities for l in range(L): velocities[\u0026quot;dW\u0026quot; + str(l+1)] = np.zeros(parameters['W'+str(l+1)].shape) velocities[\u0026quot;db\u0026quot; + str(l+1)] = np.zeros(parameters['b'+str(l+1)].shape) return velocities def update_parameters_momentum(parameters, grads, velocities, learning_rate=0.01, beta=0.9): \u0026quot;\u0026quot;\u0026quot; Arguments: parameters -- parameters W and b grads -- gradients from backprop - dW and db velocities -- current velocities for momentum Returns: parameters -- parameters W and b updated using momentum update rules velocities -- updated velocities \u0026quot;\u0026quot;\u0026quot; L = len(parameters) // 2 for l in range(L): # compute velocities using exponential weighted average velocities[\u0026quot;dW\u0026quot; + str(l+1)] = beta*velocities[\u0026quot;dW\u0026quot;+str(l+1)]+(1-beta)*grads[\u0026quot;dW\u0026quot;+str(l+1)] velocities[\u0026quot;db\u0026quot; + str(l+1)] = beta*velocities[\u0026quot;db\u0026quot;+str(l+1)]+(1-beta)*grads[\u0026quot;db\u0026quot;+str(l+1)] #parameter update parameters[\u0026quot;W\u0026quot; + str(l+1)] = parameters[\u0026quot;W\u0026quot; + str(l+1)] - learning_rate*velocities[\u0026quot;dW\u0026quot; + str(l+1)] parameters[\u0026quot;b\u0026quot; + str(l+1)] = parameters[\u0026quot;b\u0026quot; + str(l+1)] - learning_rate*velocities[\u0026quot;db\u0026quot; + str(l+1)] return parameters, velocities ## RMSProp def initialize_parameters_rmsprop(parameters): \u0026quot;\u0026quot;\u0026quot; Arguments: parameters -- dictionary containing parameters W,b Returns: squares -- initialized moving average of the squared gradient for rmsprop updates \u0026quot;\u0026quot;\u0026quot; L = len(parameters) // 2 squares = {} # Initialize squares for l in range(L): squares[\u0026quot;dW\u0026quot; + str(l+1)] = np.zeros(parameters['W'+str(l+1)].shape) squares[\u0026quot;db\u0026quot; + str(l+1)] = np.zeros(parameters['b'+str(l+1)].shape) return squares def update_parameters_rmsprop(parameters, grads, squares, learning_rate=0.01, beta=0.9, epsilon=1e-8): \u0026quot;\u0026quot;\u0026quot; Arguments: parameters -- parameters W and b grads -- gradients from backprop - dW and db squares -- current squres of past gradients for rmsprop Returns: parameters -- parameters W and b updated using rmsprop update rules squares -- updated squares \u0026quot;\u0026quot;\u0026quot; L = len(parameters) // 2 for l in range(L): # compute velocities using exponential weighted average squares[\u0026quot;dW\u0026quot; + str(l+1)] = beta*squares[\u0026quot;dW\u0026quot;+str(l+1)]+(1-beta)*(grads[\u0026quot;dW\u0026quot;+str(l+1)]**2) squares[\u0026quot;db\u0026quot; + str(l+1)] = beta*squares[\u0026quot;db\u0026quot;+str(l+1)]+(1-beta)*(grads[\u0026quot;db\u0026quot;+str(l+1)]**2) #parameter update parameters[\u0026quot;W\u0026quot; + str(l+1)] = parameters[\u0026quot;W\u0026quot; + str(l+1)] - learning_rate*(grads[\u0026quot;dW\u0026quot;+str(l+1)]/(np.sqrt(squares[\u0026quot;dW\u0026quot; + str(l+1)])+epsilon)) parameters[\u0026quot;b\u0026quot; + str(l+1)] = parameters[\u0026quot;b\u0026quot; + str(l+1)] - learning_rate*(grads[\u0026quot;db\u0026quot;+str(l+1)]/(np.sqrt(squares[\u0026quot;db\u0026quot; + str(l+1)])+epsilon)) return parameters, squares ## Adam def initialize_parameters_adam(parameters): \u0026quot;\u0026quot;\u0026quot; Arguments: parameters -- dictionary containing parameters W,b Returns: velocities -- initialized first gradient weighted averages for adam updates squares -- initialized moving average of the squared gradient for adam updates \u0026quot;\u0026quot;\u0026quot; L = len(parameters) // 2 velocities = {} squares = {} # Initialize velocities and squares for l in range(L): velocities[\u0026quot;dW\u0026quot; + str(l+1)] = np.zeros(parameters['W'+str(l+1)].shape) velocities[\u0026quot;db\u0026quot; + str(l+1)] = np.zeros(parameters['b'+str(l+1)].shape) squares[\u0026quot;dW\u0026quot; + str(l+1)] = np.zeros(parameters['W'+str(l+1)].shape) squares[\u0026quot;db\u0026quot; + str(l+1)] = np.zeros(parameters['b'+str(l+1)].shape) return velocities, squares def update_parameters_adam(parameters, grads, velocities, squares, t, learning_rate=0.01, beta1=0.9, beta2=0.999, epsilon=1e-8): \u0026quot;\u0026quot;\u0026quot; Arguments: parameters -- dictionary with parameters W, b grads -- dictionary with gradients dW, db velocities -- moving average of the first gradient squares -- moving average of the squared gradient t -- counter for bias correction Returns: parameters -- updated parameters according to adam velocities -- updated moving average of the first gradient squares -- updated moving average of the squared gradient \u0026quot;\u0026quot;\u0026quot; L = len(parameters) // 2 v_corrected = {} s_corrected = {} for l in range(L): #Calculate exponentially weighted velocities velocities[\u0026quot;dW\u0026quot; + str(l+1)] = beta1*velocities[\u0026quot;dW\u0026quot; + str(l+1)]+(1-beta1)*grads[\u0026quot;dW\u0026quot; + str(l+1)] velocities[\u0026quot;db\u0026quot; + str(l+1)] = beta1*velocities[\u0026quot;db\u0026quot; + str(l+1)]+(1-beta1)*grads[\u0026quot;db\u0026quot; + str(l+1)] #Bias correction for velocities v_corrected[\u0026quot;dW\u0026quot; + str(l+1)] = velocities[\u0026quot;dW\u0026quot; + str(l+1)]/(1-beta1**t) v_corrected[\u0026quot;db\u0026quot; + str(l+1)] = velocities[\u0026quot;db\u0026quot; + str(l+1)]/(1-beta1**t) #Calculate exponentially weighted squares squares[\u0026quot;dW\u0026quot; + str(l+1)] = beta2*squares[\u0026quot;dW\u0026quot; + str(l+1)]+(1-beta2)*grads[\u0026quot;dW\u0026quot; + str(l+1)]**2 squares[\u0026quot;db\u0026quot; + str(l+1)] = beta2*squares[\u0026quot;db\u0026quot; + str(l+1)]+(1-beta2)*grads[\u0026quot;db\u0026quot; + str(l+1)]**2 #Bias correction for squares s_corrected[\u0026quot;dW\u0026quot; + str(l+1)] = squares[\u0026quot;dW\u0026quot; + str(l+1)]/(1-beta2**t) s_corrected[\u0026quot;db\u0026quot; + str(l+1)] = squares[\u0026quot;db\u0026quot; + str(l+1)]/(1-beta2**t) #Adam parameter updates parameters[\u0026quot;W\u0026quot; + str(l+1)] = parameters[\u0026quot;W\u0026quot; + str(l+1)] - learning_rate*(v_corrected[\u0026quot;dW\u0026quot; + str(l+1)]/(np.sqrt(s_corrected[\u0026quot;dW\u0026quot; + str(l+1)])+epsilon)) parameters[\u0026quot;b\u0026quot; + str(l+1)] = parameters[\u0026quot;b\u0026quot; + str(l+1)] - learning_rate*(v_corrected[\u0026quot;db\u0026quot; + str(l+1)]/(np.sqrt(s_corrected[\u0026quot;db\u0026quot; + str(l+1)])+epsilon)) return parameters, velocities, squares  Combining Everything and Mini-Batch GD After going through each piece, we now need to combine all these functions to train a model. To do this, we have some input data $X$ with respective labels $Y$. Now, to implement mini-bach gradient descent, we need to split $X$ and $Y$ into $m$ mini-batches to run our algorithms on.\ndef mini_batches(X, Y, mini_batch_size = 64, seed = 0): \u0026quot;\u0026quot;\u0026quot; Arguments: X -- input data Y -- corresponding labels mini_batch_size -- size of the mini-batches seed -- used to set np.random.seed differently to get different shuffles Returns: mini_batches -- list of (mini_batch_X, mini_batch_Y) \u0026quot;\u0026quot;\u0026quot; #Set seed np.random.seed(seed) mini_batches = [] #Get number of examples m = X.shape[1] idx = list(np.random.permutation(m)) shuffled_X = X[:, idx] shuffled_Y = Y[idx, :] shuffled_Y = np.reshape(shuffled_Y,(1,m)) assert shuffled_Y.shape == (1,m) #Need to account for when minibatch size is divisible by m num_full_minibatch = int(math.floor(m/mini_batch_size)) for i in range(0, num_full_minibatch): mini_batch_X = shuffled_X[:,mini_batch_size*i: mini_batch_size*(i+1)] mini_batch_Y = shuffled_Y[:,mini_batch_size*i: mini_batch_size*(i+1)] mini_batches.append((mini_batch_X, mini_batch_Y)) # Now need to take care of extra examples of len \u0026lt; m if m % mini_batch_size != 0: mini_batch_X = shuffled_X[:,-(mini_batch_size-m):] mini_batch_Y = shuffled_Y[:,-(mini_batch_size-m):] mini_batches.append((mini_batch_X, mini_batch_Y)) return mini_batches  def train(X, Y, model_shape, layer_activations, optimizer, initialization_method='he', learning_rate = 0.001, mini_batch_size = 64, beta = 0.9, beta1 = 0.9, beta2 = 0.999, epsilon = 1e-8, num_epochs = 10000, print_cost = True): \u0026quot;\u0026quot;\u0026quot; Implementation of a Neural Network model. Arguments: X -- input data Y -- labels model_shape -- python list with the size of each layer layer_activations -- python list with activation of each layer optimizer -- string corresponding to optimizer to use. One of \u0026quot;gd\u0026quot;,\u0026quot;momentum\u0026quot;,\u0026quot;rmsprop\u0026quot;,\u0026quot;adam\u0026quot; learning_rate -- the learning rate parameter mini_batch_size -- the size of each mini batch beta -- Momentum/RMSProp hyperparameter beta1 -- decay of past gradients parameter for adam beta2 -- decay of past squared gradients for adam epsilon -- hyperparameter preventing division by zero in Adam and RMSProp updates num_epochs -- number of epochs print_cost -- True to print the cost every 5 epochs Returns: parameters -- trained parameters \u0026quot;\u0026quot;\u0026quot; #Track costs costs = [] #Adam bias correction parameter t = 0 #define seed for np.random.seed in mini_batch call seed = np.random.randint(1000) #Number of layers and number of training examples L = len(model_shape) m = X.shape[1] # Initialize parameters parameters = initialize_parameters(model_shape, initialization_method=initialization_method) # Initialize parameters for optimizer if optimizer == \u0026quot;gd\u0026quot;: pass elif optimizer == \u0026quot;momentum\u0026quot;: velocities = initialize_parameters_momentum(parameters) elif optimizer == 'rmsprop': squares = initialize_parameters_rmsprop(parameters) elif optimizer == \u0026quot;adam\u0026quot;: velocities, squares = initialize_parameters_adam(parameters) else: raise NameError(\u0026quot;%s is not a valid optimizer\u0026quot; % (optimizer)) #Loop for i in range(num_epochs): # Define the random minibatches. We increment the seed to reshuffle differently the dataset after each epoch seed = seed + 1 minibatches = mini_batches(X, Y, mini_batch_size, seed) #Get cost over all batchs total_cost = 0 for minibatch in minibatches: # Unpack (minibatch_X, minibatch_Y) = minibatch # Forward propagation pass AL, caches = forward_prop(minibatch_X, layer_activations, parameters) #Get minibatch cost cost_batch = cost(AL, minibatch_Y) #Add to total cost total_cost+=cost_batch # Backward propagation pass grads = backward_prop(AL, minibatch_Y, caches, layer_activations) # Update parameters if optimizer == \u0026quot;gd\u0026quot;: parameters = update_parameters_gd(parameters, grads, learning_rate=learning_rate) elif optimizer == \u0026quot;momentum\u0026quot;: parameters, velocities = update_parameters_momentum(parameters,grads, velocities,learning_rate=learning_rate, beta=beta) elif optimizer == \u0026quot;rmsprop\u0026quot;: parameters, squares = update_parameters_rmsprop(parameters, grads, squares, learning_rate=learning_rate, beta=beta, epsilon=epsilon) elif optimizer == \u0026quot;adam\u0026quot;: #Increment bias correction parameter t = t + 1 parameters, velocities, squares = update_parameters_adam(parameters, grads, velocities, squares, t, learning_rate=learning_rate, beta1=beta1, beta2=beta2, epsilon=epsilon) mean_cost = total_cost / float(mini_batch_size) # Print the cost every 5 epoch if print_cost and i % 5 == 0: print (\u0026quot;Cost after epoch %i: %f\u0026quot; %(i, mean_cost)) if print_cost and i % 1 == 0: costs.append(mean_cost) # plot the cost fig, ax = plt.subplots() fig.set_facecolor('w') fig.set_size_inches(12,9) ax.plot(costs) ax.set_ylabel('Cost') ax.set_xlabel('Epoch') plt.title(\u0026quot;Learning rate = %s, Optimizer = %s\u0026quot; % (learning_rate, optimizer)) plt.show() return parameters  Testing the Model Now that the implementation is complete, let\u0026rsquo;s test the model by doing binary classification on two handwritten digits from the MNIST dataset.\nfrom tensorflow.keras.datasets import mnist (X_train, Y_train), (X_test, Y_test) = mnist.load_data() img_shape = X_train.shape[1:] print('X_train has shape %s\\nY_train has shape %s'%(X_train.shape, Y_train.shape))  X_train has shape (60000, 28, 28) Y_train has shape (60000,)  #Convert Y_train and Y_test to (m,1) Y_train = Y_train.reshape(Y_train.shape[0],1) Y_test = Y_test.reshape(Y_test.shape[0],1) #Visualize one Entry i = np.random.randint(X_train.shape[0]) fig,ax = plt.subplots() fig.set_facecolor('w') ax.imshow(X_train[i]) ax.set_title('Label = ' + str(Y_train[i])) plt.show()  #Choose two classes for our classification model class_a = 3 #Positive Class class_b = 7 #Negative Class #Filter out the dataset to include only images in those classes idx = np.logical_or(np.squeeze(Y_train) == class_a, np.squeeze(Y_train) == class_b) X_train, Y_train = X_train[idx], Y_train[idx] #Assign class_a = 1 and class_b=0 Y_train[np.where(Y_train == class_a)] = 1.00 Y_train[np.where(Y_train == class_b)] = 0.00 print('X_train has shape %s\\nY_train has shape %s'%(X_train.shape, Y_train.shape)) idx = np.logical_or(np.squeeze(Y_test) == class_a, np.squeeze(Y_test) == class_b) X_test, Y_test = X_test[idx], Y_test[idx].astype(np.float64) #Assign class_a = 1 and class_b=0 Y_test[np.where(Y_test == class_a)] = 1.00 Y_test[np.where(Y_test == class_b)] = 0.00 print('X_test has shape %s\\nY_test has shape %s'%(X_test.shape, Y_test.shape))  X_train has shape (12396, 28, 28) Y_train has shape (12396, 1) X_test has shape (2038, 28, 28) Y_test has shape (2038, 1)  #Reshape X_train and X_test into (m, 28*28) X_train_flat = X_train.reshape(X_train.shape[0], -1).T X_test_flat = X_test.reshape(X_test.shape[0], -1).T # Standardize data to have feature values between 0 and 1. X_train_norm = X_train_flat/255. X_test_norm = X_test_flat/255. print (\u0026quot;X_train's shape: \u0026quot; + str(X_train_norm.shape)) print (\u0026quot;X_test's shape: \u0026quot; + str(X_test_norm.shape))  X_train's shape: (784, 12396) X_test's shape: (784, 2038)  Defining our Model I\u0026rsquo;ve chosen to create a model to classify either a $3$ or a $7$. Now, let\u0026rsquo;s define a model.\nThe output is either $1$ or $0$, where $1$ corresponds to a $3$ and $0$ corresponds to a $7$. This means the last layer dimension needs to be $1$. For the first dimension, that should be $28\\times28\\times1=784$, since we\u0026rsquo;re taking the image and stacking each row of pixels ontop of each other (flattening). For our hidden layer, I\u0026rsquo;ll choose $n_h=7$ So we have a three layer model - $784\\times7\\times1$ with layer activations ReLU-ReLU-Sigmoid.\nWe can compare the performance of gradient descent versus adam optimization. Let\u0026rsquo;s start with gradient descent.\n#Model Parameters n_x = X_train_norm.shape[0] n_y = 1 n_h = 7 model_shape = (n_x, n_h, n_y) layer_activations = ['relu','relu','sigmoid'] optimizer = 'gd' learning_rate = 0.0005 parameters = train(X_train_norm,Y_train, model_shape, layer_activations, optimizer, learning_rate=learning_rate, mini_batch_size=128, num_epochs=17)  Cost after epoch 0: 0.458453 Cost after epoch 5: 0.259276 Cost after epoch 10: 0.162094 Cost after epoch 15: 0.085669  Evaluating our Model Now that the model has trained, we need some way of assessing the performance of our model. This is done with our testing set: $(X_{\\text{test}}, Y_{\\text{test}})$ Essentially, we just need to feed $X_{\\text{test}}$ through our model\u0026rsquo;s forward pass, which outputs $A^{[L]}=\\hat{Y}$, our predictions. Then we simply compare $\\hat{Y}$ with $Y_{\\text{test}}$ and evaluate the accuracy as $A=\\frac{\\text{# correct}}{\\text{# total}}$. Additionally, I\u0026rsquo;ll return the indices where the model predicted correctly, and where it predicted incorrectly, to visualize the model\u0026rsquo;s shortcomings.\ndef evaluate(X_test, Y_test, layer_activations, parameters, threshold=0.5): \u0026quot;\u0026quot;\u0026quot; Evaluates performance of trained model on test set Attributes: X_test -- Test set inputs Y_test -- Test set labels layer_activations -- python list of strings corresponding to activation functions of layer l parameters -- trained parameters W, b Returns: correct -- list of booleans corresponding to the indices of correct predictions incorrect -- list of booleans correspondingin to the indices of incorrect predictions \u0026quot;\u0026quot;\u0026quot; #Number of test samples m = X_test.shape[1] assert Y_test.shape == (1,m) Y_pred, _ = forward_prop(X_test, layer_activations, parameters) #Threshold Y_pred[Y_pred\u0026gt;threshold]=1. Y_pred[Y_pred\u0026lt;=threshold]=0 num_correct = np.sum(Y_pred == Y_test) num_incorrect = m-num_correct print(\u0026quot;Accuracy: %f\u0026quot; % (float(num_correct)/m)) correct = Y_pred == Y_test incorrect = Y_pred != Y_test return np.squeeze(correct), np.squeeze(incorrect)  #Evaluate correct, incorrect = evaluate(X_test_norm, Y_test.T, layer_activations, parameters) #Get correect predictions X_correct = X_test[correct] Y_correct = Y_test[correct] #Get incorrect predictions X_incorrect = X_test[incorrect] Y_incorrect = Y_test[incorrect] fig,ax = plt.subplots(3,2) fig.set_size_inches(12,18) fig.set_facecolor('w') i_correct = np.random.randint(len(X_correct), size=3) i_incorrect = np.random.randint(len(X_incorrect), size=3) for i in range(3): ax[i,0].imshow(X_correct[i_correct[i]]) ax[i,0].set_title(\u0026quot;%i: Correctly predicted Y=%i\u0026quot;%(i_correct[i],class_a*Y_correct[i_correct[i]][0] + (1-Y_correct[i_correct[i]][0])*class_b)) ax[i,1].imshow(X_incorrect[i_incorrect[i]]) ax[i,1].set_title(\u0026quot;%i: Incorrectly predicted Y=%i\u0026quot;%(i_incorrect[i],class_b*Y_incorrect[i_incorrect[i]][0] + (1-Y_incorrect[i_incorrect[i]][0])*class_a)) ax[i,0].xaxis.set_visible(False) ax[i,0].yaxis.set_visible(False) ax[i,1].xaxis.set_visible(False) ax[i,1].yaxis.set_visible(False) plt.show()  Accuracy: 0.964671  Adam Optimization Now that we\u0026rsquo;ve gotten results using Gradient Descent, Let\u0026rsquo;s compare it with adam optimization\n#Model Parameters n_x = X_train_norm.shape[0] n_y = 1 n_h = 7 model_shape = (n_x, n_h, n_y) layer_activations = ['relu','relu','sigmoid'] optimizer = 'adam' learning_rate = 0.0005 parameters = train(X_train_norm,Y_train, model_shape, layer_activations, optimizer, learning_rate=learning_rate, mini_batch_size=128, num_epochs=5)  Cost after epoch 0: 0.347253  #Evaluate correct, incorrect = evaluate(X_test_norm, Y_test.T, layer_activations, parameters) #Get correect predictions X_correct = X_test[correct] Y_correct = Y_test[correct] #Get incorrect predictions X_incorrect = X_test[incorrect] Y_incorrect = Y_test[incorrect] fig,ax = plt.subplots(3,2) fig.set_size_inches(12,18) fig.set_facecolor('w') i_correct = np.random.randint(len(X_correct), size=3) i_incorrect = np.random.randint(len(X_incorrect), size=3) for i in range(3): ax[i,0].imshow(X_correct[i_correct[i]]) ax[i,0].set_title(\u0026quot;%i: Correctly predicted Y=%i\u0026quot;%(i_correct[i],class_a*Y_correct[i_correct[i]][0] + (1-Y_correct[i_correct[i]][0])*class_b)) ax[i,1].imshow(X_incorrect[i_incorrect[i]]) ax[i,1].set_title(\u0026quot;%i: Incorrectly predicted Y=%i\u0026quot;%(i_incorrect[i],class_b*Y_incorrect[i_incorrect[i]][0] + (1-Y_incorrect[i_incorrect[i]][0])*class_a)) ax[i,0].xaxis.set_visible(False) ax[i,0].yaxis.set_visible(False) ax[i,1].xaxis.set_visible(False) ax[i,1].yaxis.set_visible(False) plt.show()  Accuracy: 0.969578  Comparison As we can see, using the adam optimizer yielded better accuracy in nearly one third of the number of epochs.\n","date":1591765774,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591765774,"objectID":"cb30a4de54be5496c51334908322df12","permalink":"https://Fquico1999.github.io/project/numpy_neural_nets/","publishdate":"2020-06-09T22:09:34-07:00","relpermalink":"/project/numpy_neural_nets/","section":"project","summary":"Implementation of Neural Networks using only NumPy","tags":["Deep Learning"],"title":"NumPy Neural Networks","type":"project"},{"authors":[],"categories":[],"content":" Click here if you want to skip to my involvement in this team.\nOverview  UBC Open Robotics is a student team comprised of 60 students split into three subteams - ArtBot, PianoBot, and Robocup@Home. I am a member of the software team in the RoboCup@Home subteam.\nThe objective of RoboCup@Home is to build a household assistant robot that can perform a variety of tasks, including carrying bags, introducing and seating guests at a party, answering a variety of trivia questions and more. Open Robotics is developing a robot to compete in the 2021 RoboCup@Home Education Challenge while in the meantime, our subteam will compete in the 2020 Competition using the Turtlebot 2 as our hardware platform.\nThe Challenge  The rules for the 2020 Challenge can be found here, but they boil down to three specific tasks:\n Carry My Luggage - Navigation task Find My Mates - Vision task Receptionist - Speech task  Carry My Luggage Goal: The robot helps the operator to carry a bag to the car parked outside\nStarting at a predifined location, the robot has to find the operator and pick up the bag the operator is pointing to. After picking up the bag, the robot needs to indicate that it is ready to follow and then it must follow the operator while facing 4 obstacles along the way (crowd, small object, difficult to see 3D object, small blocked area).\nFind My Mates Goal: The robot fetches the information of the party guests for the operator who knows only the names of the guests.  Knowing only the operator, the robot must identify unknown people and meet those that are waving. Afterwards, it must remember the person and provide a unique description of that person, as well as that person\u0026rsquo;s location, to the operator.\nReceptionist Goal: The robot has to take two arriving guests to the living room, introducing them to each other, and offering the just-arrived guest an unoccupied place to sit.  Knowing the host of the party, John, the robot must identify unknown guests, request their names and favourite drinks and then point to an empty seat where the guest can sit.\nMy Contributions My main contributions have been in speech recognition and in handle segmentation, targeting task 3 and task 1 respectively, however I also worked on facial recognition earlier in the project.\nSpeech Recognition You can find this repository here\nSpeech recognition is implemented using PocketSphinx which is based on CMUSphinx. Which offers two modes of operation - Keyword Spotting (KWS) and Language Model (LM).\nKWS Keyword spotting tries to detect specific keywords or phrases, without imposing any type of grammer rules ontop. Utilizing keyword spotting requires a .dic file and a .kwslist file.\nThe dictionary file is a basic text file that contains all the keywords and their phonetic pronunciation, for instance:\nBACK\tB AE K FORWARD\tF AO R W ER D FULL\tF UH L  These files can be generated here .\nThe .kwslist file has each keyword and a certain threshold, more or less corresponding to the length of the word or phrase, as follows:\nBACK /1e-9/ FORWARD /1e-25/ FULL SPEED /1e-20/  LM Language model mode additionally imposes a grammer. To utilize this mode, .dic, .lm and .gram files are needed.\nThe dictionary file is the same as in KWS mode.\nThe .lm file can be generated, along with the .dic file, from a corpus of text, using this tool\nThe generate_corpus.py script in SpeechRecognition/asr/resources sifts through the resource files from robocup\u0026rsquo;s GPSRCmdGenerator and creates a corpus. The .dic and .lm files are generated from it by using the above tool.\nFinally, the .gram file specifies the grammer to be imposed. For instance, if the commands we are expecting are always an action followed by an object or person and then a location, it might look like:\npublic \u0026lt;rule\u0026gt; = \u0026lt;actions\u0026gt; [\u0026lt;objects\u0026gt;] [\u0026lt;names\u0026gt;] [\u0026lt;locations\u0026gt;]; \u0026lt;actions\u0026gt; = MOVE | STOP | GET | GIVE \u0026lt;objects\u0026gt; = BOWL | GLASS \u0026lt;names\u0026gt; = JOE | JOEBOB \u0026lt;locations\u0026gt; = KITCHEN | BEDROOM  Handle Segmentation You can find this repository here\nTo be able to accurately pick up a bag, the robot must be able to detect where its handle is, as well as some information on how wide it is. To accomplish this, I trained a UNet model to segment images of handles.\nUNet models are models that take as input an image and output a mask defining a region of interest. Producing data for these models requires labelling regions of interest on a variety of images. For that purpose I used two tools - LableMe or in MakeSense.ai.\n Training History for the Handle Segmentation Model  After training, model inference on the test set was promising.\n Model Inference on Test Set: input image on the left, model prediction in the center and ground truth on the right  Additionally, some processing was done on the mask to obtain candidates for the apex of the handle, and its width. This allowed the model to output where the arm should grasp, like the sequence below. Additional work will be done to integrate the RGBD depth layer to obtain a depth location of the handle.\n ","date":1591395502,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591395502,"objectID":"ff62214a94179c9a208c44ab9465861e","permalink":"https://Fquico1999.github.io/project/openrobotics/","publishdate":"2020-06-05T15:18:22-07:00","relpermalink":"/project/openrobotics/","section":"project","summary":"Developing Software to compete in the RoboCup@Home competition.","tags":["Deep Learning","Computer Vision"],"title":"UBC Open Robotics","type":"project"},{"authors":[],"categories":[],"content":"Overview ENPH 353 is a project course designed to teach machine learning techinques with an end-of-term competition. The premise of the competition is to develop algorithms that allow a simulated robot to traverse a parking lot and correctly identify locations and number plates of parked cars while avoiding pedestrians and a moving vehicle. The simulation took place in Gazebo in ROS\nThe Competition The image above shows the parking lot for the competition. The robot is the white, square car. It\u0026rsquo;s task is to drive on the roads while collecting the license plates on the blue rectangular cars. Additionally, it must avoid pedestrians and the truck driving around the inside track.\n Example license plate  The license plates hold two pieces of information, the position of the car marked with the larger P1 above, and a BC auto-generated license plate with two letters and two numbers.\nThe inputs to the system were the images captured by a camera mounted on the robot\u0026rsquo;s frame and as outputs the robot would publish velociy commands to guide the robot as well as positions and license plate data to a server for scoring.\nThe scores are determined by the following:\n   Rules Points     Correctly record license plate and position for a car on outside track +6   Correctly record license plate and position for a car on inside track +8   More than two wheels outside of the track -2   Collide with white pick-up truck -5   Hit pedestrian -10   Drive one full loop around the outer track +5    The Strategy YOLO I decided to use the YOLO framework to allow the robot to understand it\u0026rsquo;s environment. Yolo stands for \u0026ldquo;You Only Look Once\u0026rdquo;, and is a state of the art object detection system. I used YOLOv3 to obtain labeled bounding boxes around classes of interest, namely the blue parked cars, pedestrians, the truck, and license plates.\nYOLO works by taking an image and dividing into smaller subsections, and predicting locations and accuracies for bounding boxes of a certain class. The advantage of using YOLO is that it is incredibly fast compared to other classifier models, allowing us to obtain near real-time predictions.\nTraining the model required around 200 labeled images taken from simulation video, trained for about 25000 iterations. In ROS, a node subscribes to the camera feed and passes the images through yolo. A YoloElement message was made to store each bounding box for each class, and publish it to a yolo node. This node informs pedestrian logic and gives bounding boxes for the license plate detection as well.\n YOLO Output - The robot is waiting at the cross section. It detects the pedestrian as well as the car and license plate ahead.  Navigation The main components of the robot\u0026rsquo;s navigation are the driver and controller.\nDriver The essential method for Karen’s driving was get_twist(). This method used computer vision techniques to return a Twist command (Twist is a message that contains all the velocities of the robot) which would be called by the controller to drive the robot. The driver has three main approaches to following the road.\nThe first two approaches are very similar. The robot can follow the road by either looking at the right edge or the left edge of the road and following it. These approaches are mirror, so the following is a list of steps taken to perform right edge following:\n Scale input image to a smaller size and apply HSV mask to filter out the road. Find the first pixel of a road from the right-hand side at an upper and lower location. Compare these pixel locations to the expected locations to determine the current error. If the error magnitude exceeds a threshold, turn left if the error is negative, or right if the error is positive, otherwise, drive straight.   Driving Straight - the relative difference in white lines is within the threshold. Left Turn - the relative difference causes a negative error, robot will turn left.  This method was found to be robust. Even when starting off the road, the robot will turn and navigate towards the road, and begin following the edge. However, general navigation and knowing which way to drive is not solved by this approach. The controller must solve these challenges. Note, to follow the left edge, the white lines are flipped about the y-axis in the above figures.\nThe third approach of road following is to use the “center of mass” of the road. This method is not as robust as the above edge following. However, this approach is necessary when the edges of the road are misleading. This approach follows a similar idea as edge following, except it differs in steps 2 and 3:\nThreshold the image so that the road is a binary mask. Use OpenCV to compute the moments of the image, then compare the x coordinate of the center of mass of the road with the center of the image to get the error.  In general, each of these approaches could follow the road successfully. It is up to the controller to decide when to use each approach.\nController The robot\u0026rsquo;s controller makes decisions about when and where to turn, when to stop for pedestrians, and when to stop for the pick-up truck. The following is a flow chart illustrating the state diagram of the controller:\nExit T-IntersectionExit T-IntersectionRight Edge Follow PerimeterRight Edge Follow\u0026hellip;NoNoSee Pedestrian?See Pedestrian?Wait Untill CrossedWait Untill CrossedYesYesCollected Last Perimiter License Plate?Collected Last\u0026hellip;NoNoYesYesLeft Edge Follow\n(Enter Inner Track)Left Edge Follow\u0026hellip;In Inner\nRing?In Inner\u0026hellip;NoNoFollow Road CMFollow Road CMYesYesCollected Last Perimiter License Plate?Collected Last\u0026hellip;FinishedFinishedNoNoYesYesTruck Close?Truck Close?Wait Untill GoneWait Untill GoneYesYesInitialize YOLO\nand License Plate ReaderInitialize YOLO\u0026hellip;Viewer does not support full SVG 1.1\nPosition and License Plate Recognition License Plates The algorithm takes cropped license plate images based on bounding box predictions from YOLO and does some preprocessing before passing them into a CNN for character recognition.\nThe preprocessing algorithm takes bounding boxes from /yolo with the license plate class and crops the raw camera image to size. We obtain potential characters using and adaptive threshold followed by cv2\u0026rsquo;s findContours() function. After some filtering based on size and aspect ratio, we end up with four predictions. The ordering of characters is determined based on the x position of the bounding box prediction.\n License Plate Recognition - After adaptive thresholding, findContours yields potential character candidates that are filtered producing the final 4 characters seen.  Position To read the positions of each license plate, a region of interest is defined based on the bounding box around the license plate from YOLO. To perform character recognition, the CNN is used again, trained on data collected from allowing the robot to do several laps around the perimeter.\n Examples of positions after cropping to ROI  Results A total of 20 teams competed in this competition. This model was one of four to receive a perfect score of 57 points.\n The video above shows the robot completing the outer ring. The Gazebo simulation is shown on the right, the scoring server is on the bottom left, and the terminal displaying information about the robot is on the upper left.\n","date":1591395484,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591395484,"objectID":"c5502dda16902d094db7bd7a7a1a664d","permalink":"https://Fquico1999.github.io/project/enph353/","publishdate":"2020-06-05T15:18:04-07:00","relpermalink":"/project/enph353/","section":"project","summary":"Implemeted YOLO to navigate a simulated course for ENPH 353.","tags":["Deep Learning","Computer Vision"],"title":"Machine Learning Competition","type":"project"},{"authors":[],"categories":[],"content":"Overview EECE571T - Advanced Machine Learning Tools, is a graduate level machine learning course I took at UBC. A large part of this course was the final project for which I choose to do artifact removal and biomarker segmentation of FOXP3+ biomarkers for follicular lymphoma TMA cores in conjunction with the British Columbia Cancer Agency.\nThe purpose of the project was to introduce a quantitative method of evaluating FOXP3+ biomarker counts in TMA cores, and improve upon industry standard - usually estimated by eye by a Pathologist or by the software Aperio.\nOne major obstacle was the frequent presence of artifacts in the cores which would completely overpower the actual positive biomarkers themselves. These had to be ignored by Pathologists, and removed by hand in Aperio.\nAs such, the proposed framework is broken into artifact segmentation, to segment and remove artifacts, and marker segmentation to identify the biomarkers. In both cases, the input images were very large ($2886\\times 2886$), so to preserve global and local structure, patches were made and fed into UNets to produce binary masks for both artifacts and markers. These methods and results are discussed in detail in the final report paper.\nSee the paper here\n","date":1591395470,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591395470,"objectID":"76a23cb2e44a62212c48b3b816da0d43","permalink":"https://Fquico1999.github.io/project/eece571t/","publishdate":"2020-06-05T15:17:50-07:00","relpermalink":"/project/eece571t/","section":"project","summary":"A Project for EECE 571T - Advanced Machine Learning Tools - Where I created a pipeline to detect FOXP3+ biomarkers in follicular lymphoma TMA cores.","tags":["Deep Learning"],"title":"Artifact Removal \u0026 Biomarker Segmentation","type":"project"}]